<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 中的构造函数</title>
    <url>//article/C++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>C++ 构造函数就是创建类对象时自动执行的函数，编译器会默认提供3给默认构造函数，一个<code>构造函数</code>，一个<code>拷贝构造函数</code>，一个<code>移动构造函数</code>。</p>
<p>例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>类 A 的3给默认构造函数为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">A</span>(); <span class="comment">// 构造函数</span></span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp;); <span class="comment">// 拷贝构造函数</span></span><br><span class="line"><span class="built_in">A</span>(A&amp;&amp;) <span class="comment">// 移动构造函数</span></span><br></pre></td></tr></table></figure>

<h2 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a>构造函数初始化列表</h2><p>构造函数初始化列表的语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_a, m_b, m_c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">A</span>(<span class="type">int</span> _a, <span class="type">int</span> _b, <span class="type">int</span> _c);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>构造函数定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A::<span class="built_in">A</span>(<span class="type">int</span> _a, <span class="type">int</span> _b, <span class="type">int</span> _c) :</span><br><span class="line">	<span class="built_in">m_a</span>(_a),</span><br><span class="line">	<span class="built_in">m_b</span>(_b),</span><br><span class="line">	<span class="built_in">m_c</span>(_c)</span><br><span class="line">&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;a: &quot;</span> &lt;&lt; m_a &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;b: &quot;</span> &lt;&lt; m_b &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;c: &quot;</span> &lt;&lt; m_c &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在函数体内初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A::<span class="built_in">A</span>(<span class="type">int</span> _a, <span class="type">int</span> _b, <span class="type">int</span> _c)</span><br><span class="line">&#123;</span><br><span class="line">	m_a = _a;</span><br><span class="line">	m_b = _b;</span><br><span class="line">	m_c = _c;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;a: &quot;</span> &lt;&lt; m_a &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;b: &quot;</span> &lt;&lt; m_b &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;c: &quot;</span> &lt;&lt; m_c &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><p><img src="/img/post_img/cplusplus_0001.png" alt="image"></p>
<p>类成员权限：共有（<code>public</code>）、保护（<code>protected</code>）、私有（<code>private</code>）。<br>继承分为：共有继承（<code>public</code>）、保护继承（<code>protected</code>）、私有继承（<code>private</code>）。</p>
<h2 id="共有继承（public）"><a href="#共有继承（public）" class="headerlink" title="共有继承（public）"></a>共有继承（public）</h2><p>共有继承可以访问 <code>public</code>和<code>protected</code>下的内容，<code>private</code>下的无法访问。也就是<strong>共有继承</strong>会把父类中除私有（<code>private</code>）成员外的 <code>public</code> 和 <code>protected</code> 给继承下来。父类中的 <code>private</code> 在子类中无法访问，也就是没有继承下来。</p>
<h2 id="保护继承（protected）"><a href="#保护继承（protected）" class="headerlink" title="保护继承（protected）"></a>保护继承（protected）</h2><p>保护继承可以访问父类中的 <code>public</code>和<code>protected</code>下的内容，但是父类中的 <code>public</code> 在子类中将会变为 <code>protected</code>权限，私有权限任然为私有不可访问。保护继承会把父类中的<code>public</code>和<code>protected</code>继承为 <code>protected</code>，<code>private</code> 不做继承，也就无法访问。</p>
<h2 id="私有继承（private）"><a href="#私有继承（private）" class="headerlink" title="私有继承（private）"></a>私有继承（private）</h2><p>私有继承会把父类中的 <code>public</code>和<code>protected</code>继承为<code>private</code>，父类中的 <code>private</code> 不做继承，也就无法访问。</p>
<h2 id="访问父类中的-private-成员"><a href="#访问父类中的-private-成员" class="headerlink" title="访问父类中的 private 成员"></a>访问父类中的 private 成员</h2><p>默认我们无法在子类中访问父类中的 <code>private</code> 成员，但是我们可以通过父类的 <code>public</code> 或 <code>protected</code> 成员函数来间接的访问父类中的 <code>private</code> 成员。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 单片机简单按键程序</title>
    <url>//article/at32-key-01/</url>
    <content><![CDATA[<p>今天写了一下简单的按键程序，单片机是 <code>AT32F437ZGT7</code> ，按键消抖用的是阻塞延时函数。下面列出代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* add user code begin Header */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> **************************************************************************</span></span><br><span class="line"><span class="comment"> * @file     main.c</span></span><br><span class="line"><span class="comment"> * @brief    main program</span></span><br><span class="line"><span class="comment"> **************************************************************************</span></span><br><span class="line"><span class="comment"> *                       Copyright notice &amp; Disclaimer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The software Board Support Package (BSP) that is made available to</span></span><br><span class="line"><span class="comment"> * download from Artery official website is the copyrighted work of Artery.</span></span><br><span class="line"><span class="comment"> * Artery authorizes customers to use, copy, and distribute the BSP</span></span><br><span class="line"><span class="comment"> * software and its related documentation for the purpose of design and</span></span><br><span class="line"><span class="comment"> * development in conjunction with Artery microcontrollers. Use of the</span></span><br><span class="line"><span class="comment"> * software is governed by this copyright notice and the following disclaimer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THIS SOFTWARE IS PROVIDED ON &quot;AS IS&quot; BASIS WITHOUT WARRANTIES,</span></span><br><span class="line"><span class="comment"> * GUARANTEES OR REPRESENTATIONS OF ANY KIND. ARTERY EXPRESSLY DISCLAIMS,</span></span><br><span class="line"><span class="comment"> * TO THE FULLEST EXTENT PERMITTED BY LAW, ALL EXPRESS, IMPLIED OR</span></span><br><span class="line"><span class="comment"> * STATUTORY OR OTHER WARRANTIES, GUARANTEES OR REPRESENTATIONS,</span></span><br><span class="line"><span class="comment"> * INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **************************************************************************</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* add user code end Header */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;at32f435_437_wk_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wk_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wk_system.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin private includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add user code end private includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin private typedef */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add user code end private typedef */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin private define */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add user code end private define */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin private macro */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_BIT(reg, bit) (reg |= (1 &lt;&lt; bit))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLEAR_BIT(reg, bit) (reg &amp;= ~(1 &lt;&lt; bit))</span></span><br><span class="line"><span class="comment">/* add user code end private macro */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private variables ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin private variables */</span></span><br><span class="line">confirm_state led2_flag = FALSE;</span><br><span class="line">confirm_state led3_flag = FALSE;</span><br><span class="line"><span class="comment">/* add user code end private variables */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private function prototypes --------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin function prototypes */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">/* add user code end function prototypes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* add user code begin 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add user code end 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief main function.</span></span><br><span class="line"><span class="comment"> * @param  none</span></span><br><span class="line"><span class="comment"> * @retval none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* add user code begin 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add user code end 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* system clock config. */</span></span><br><span class="line">    wk_system_clock_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* config periph clock. */</span></span><br><span class="line">    wk_periph_clock_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* nvic config. */</span></span><br><span class="line">    wk_nvic_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* timebase config. */</span></span><br><span class="line">    wk_timebase_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init gpio function. */</span></span><br><span class="line">    wk_gpio_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add user code begin 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add user code end 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* add user code begin 3 */</span></span><br><span class="line">        <span class="keyword">switch</span> (key_scan()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x01</span>:</span><br><span class="line">            gpio_bits_write(LED2_GPIO_PORT, LED2_PIN, led2_flag = !led2_flag);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x02</span>:</span><br><span class="line">            gpio_bits_write(LED3_GPIO_PORT, LED3_PIN, led3_flag = !led3_flag);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* add user code end 3 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* add user code begin 4 */</span></span><br><span class="line"><span class="comment">/********************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief 按键扫描，一共两个按键</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return uint8_t </span></span><br><span class="line"><span class="comment"> ********************************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> result = <span class="number">0x00</span>;</span><br><span class="line">    flag_status sw1_state, sw2_state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取按键状态</span></span><br><span class="line">    sw1_state = gpio_input_data_bit_read(SW1_GPIO_PORT, SW1_PIN);</span><br><span class="line">    sw2_state = gpio_input_data_bit_read(SW2_GPIO_PORT, SW2_PIN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个按键中是否有任意一个被按下</span></span><br><span class="line">    <span class="keyword">if</span> (!sw1_state | !sw2_state) &#123;</span><br><span class="line">        wk_delay_ms(<span class="number">15</span>); <span class="comment">// 延时消抖</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再次读取按键的状态</span></span><br><span class="line">        sw1_state = gpio_input_data_bit_read(SW1_GPIO_PORT, SW1_PIN);</span><br><span class="line">        sw2_state = gpio_input_data_bit_read(SW2_GPIO_PORT, SW2_PIN);</span><br><span class="line">        <span class="keyword">if</span> (!sw1_state) &#123;</span><br><span class="line"></span><br><span class="line">            SET_BIT(result, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!gpio_input_data_bit_read(SW1_GPIO_PORT, SW1_PIN)) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sw2_state) &#123;</span><br><span class="line">            SET_BIT(result, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (!gpio_input_data_bit_read(SW2_GPIO_PORT, SW2_PIN)) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* add user code end 4 */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>单片机</tag>
        <tag>按键</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言宏笔记详情</title>
    <url>//article/c-language-macro-details/</url>
    <content><![CDATA[<p>宏是<code>C</code>语言中的基石，写 <code>c</code> 程序就必定会用的宏，所有学习<strong>宏</strong>也是必不可少的。</p>
<p>宏的分类（使用方式）：</p>
<ul>
<li>简单的宏定义（只有宏名）：<code>#define DEBUG</code></li>
<li>简单替换：<code>#define PI 3.1415926</code></li>
<li>带参数的宏：<ul>
<li>#define ADD(x,y) ((x) + (y)) 	&#x2F;&#x2F; 加法运算</li>
<li>#define SQRT(x)  ((x) * (x)) 	&#x2F;&#x2F; 平方运算</li>
</ul>
</li>
</ul>
<h2 id="do-while-0-语法"><a href="#do-while-0-语法" class="headerlink" title="do {} while(0) 语法"></a>do {} while(0) 语法</h2><p>在 C 语言 中，使用 do…while 结构来定义宏时，通常是为了确保宏定义中的代码块在使用时可以像一个独立的语句一样被执行。do…while 结构的基本语法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MACRO_NAME (arguments...)</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">/* 宏定义 */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个简单的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRIVATE_MESSAGE(msg) do &#123;\</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;===============%s===============\n&quot;</span>, msg);\</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    PRIVATE_MESSAGE(<span class="string">&quot;PRIVATE MESSAGE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">===============PRIVATE MESSAGE===============</span><br></pre></td></tr></table></figure>

<h2 id="系统宏"><a href="#系统宏" class="headerlink" title="系统宏"></a>系统宏</h2><p>在 C 语言 中，系统预定义的宏提供了有关编译环境、操作系统和其他编译时信息的有用信息。这些宏在编译过程中自动设置，无需用户手动定义。以下是一些常见的系统预定义宏：</p>
<ul>
<li><code>__DATE__</code>: 这个宏的替换文本是一个包含编译日期的字符串字面量，日期格式为<code>“Mmm dd yyyy”</code>（例如：<code>“Mar 19 2006”</code>）1.</li>
<li><code>__TIME__</code>: 类似于 <code>__DATE__</code>，这个宏的替换文本是一个包含编译时间的字符串字面量，时间格式为<code>“hh:mm:ss”</code>（例如：<code>“14:30:45”</code>）</li>
<li><code>__FILE__</code>: 这个宏的替换文本是当前源文件的文件名</li>
<li><code>__LINE__</code>: 这个宏的替换文本是当前源文件中的行号</li>
<li><code>__func__</code>: 这个宏的替换文本是当前函数的名称（仅在 <code>C99</code> 及更高版本中可用）</li>
</ul>
<p>这些宏可以帮助程序员在编写代码时获取有关编译环境和源文件的信息。例如，你可以在调试时使用 <code>__FILE__</code> 和 <code>__LINE__</code> 来定位错误。</p>
<p><img src="/img/post_img/c_macro_001.png" alt="C语言系统宏例子"></p>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DATE: Feb 12 2024</span><br><span class="line">TIME: 11:21:27</span><br><span class="line">FILE: E:/work/code/c_dev/c_learn/demos/src/macro_demo.c</span><br><span class="line">LINE: 14</span><br><span class="line">FUNC: system_macro_demo</span><br><span class="line">===============系统宏===============</span><br></pre></td></tr></table></figure>

<h2 id="宏中的"><a href="#宏中的" class="headerlink" title="宏中的 #"></a>宏中的 <code>#</code></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> A(x) #x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B(a,b) #a<span class="string">&quot;.&quot;</span>#b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, B(<span class="number">12</span>,<span class="number">23</span>)); <span class="comment">// 宏中的 # 的演示</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, A(Hello));</span><br></pre></td></tr></table></figure>

<p>以上代码输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">12.23</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p><code>#</code> 会把宏传递的参数转换为字符串。</p>
<h2 id="宏中的-1"><a href="#宏中的-1" class="headerlink" title="宏中的 ##"></a>宏中的 <code>##</code></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TEST(x) test##x</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">testA</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;testA...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 宏中的 ## 演示</span></span><br><span class="line">    TEST(A)(); <span class="comment">// 调用 testA() 函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>##</code> 的作用是连接字符的作用，用于在原有的字符上连接生成新的字符，注意：并不是字符串 “abc” 而是 abc 字符。</p>
<h2 id="宏中的-2"><a href="#宏中的-2" class="headerlink" title="宏中的 #@"></a>宏中的 <code>#@</code></h2><p>在<code>C</code>语言的宏中，<code>#@</code>的功能是将其后面的宏参数字符化，即在其左右各加上一个单引号。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CC(c) #@ c</span></span><br></pre></td></tr></table></figure>

<p><code>#@</code> 只能在 MicroSoft MSVC 中使用，GNU GCC 是不支持的。</p>
<h2 id="设置或清除某一位"><a href="#设置或清除某一位" class="headerlink" title="设置或清除某一位"></a>设置或清除某一位</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_BIT(num, n) ((num) | (1 &lt;&lt; (n)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLEAR_BIT(num, n) ((num) &amp; ~(1&lt;&lt;(n)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    a = SET_BIT(a, <span class="number">0</span>);</span><br><span class="line">    a = SET_BIT(a, <span class="number">1</span>);</span><br><span class="line">    a = SET_BIT(a, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a: %b\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    a = CLEAR_BIT(a, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a: %b\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a: 111</span><br><span class="line">a: 101</span><br></pre></td></tr></table></figure>

<h2 id="C-语言宏参考"><a href="#C-语言宏参考" class="headerlink" title="C 语言宏参考"></a>C 语言宏参考</h2><ul>
<li><a href="https://www.cnblogs.com/skyzu2333/p/14888938.html">https://www.cnblogs.com/skyzu2333/p/14888938.html</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>宏</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中打印整型数组的函数实现</title>
    <url>//article/c-language-print-array/</url>
    <content><![CDATA[<p>在这里分享出自己写的，用于打印整型数组的<code>C</code>函数，把函数写到了 <code>utils</code> 文件中，以后可以往里边写一下其他的工具函数。</p>
<h2 id="utils-h"><a href="#utils-h" class="headerlink" title="utils.h"></a>utils.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _UTILS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _UTILS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Line(message) printf(<span class="string">&quot;-------------------- %s --------------------\n&quot;</span>, message)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_array_int</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _UTILS_H */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="utils-c"><a href="#utils-c" class="headerlink" title="utils.c"></a>utils.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_array_int</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (size - <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印最后一个元素，并换行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(arr++));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印非最后一个元素，不换行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(arr++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>clang-format 格式化工具</title>
    <url>//article/clang-format/</url>
    <content><![CDATA[<p>在格式化 <code>c/c++</code> 代码时会用到 <code>clang-format</code> 这个工具，在此做个简短的记录。</p>
<p><code>clang-format</code> 下载地址：<a href="https://llvm.org/builds/">https://llvm.org/builds/</a></p>
<h2 id="clang-format"><a href="#clang-format" class="headerlink" title=".clang-format"></a>.clang-format</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BasedOnStyle: LLVM # LLVM, Google</span><br><span class="line">IndentWidth: 4</span><br><span class="line">ColumnLimit: 81</span><br><span class="line">BreakBeforeBraces: Linux</span><br><span class="line">AllowShortLoopsOnASingleLine:   true</span><br><span class="line">AllowShortBlocksOnASingleLine:  true</span><br></pre></td></tr></table></figure>

<ul>
<li>BreakBeforeBraces: Linux<ul>
<li>设置为 Linux 则函数的大括号单独一行，if for 等的开始大括号不会单独一行。</li>
</ul>
</li>
<li>IndentWidth: 4<ul>
<li>缩进设为4个空格</li>
</ul>
</li>
<li>BasedOnStyle<ul>
<li>设置基础样式，选择LLVM比较好</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>clang-format</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake 笔记</title>
    <url>//article/cmake-note/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言字符串处理相关笔记</title>
    <url>//article/c-language-string-manage/</url>
    <content><![CDATA[<h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">gets</span> <span class="params">(<span class="type">char</span> *__str)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：从标准输入读入字符，并保存到<code>__str</code>指定的内存空间，直到出现换行符或读到文件结尾为止。</p>
<p>参数：s 字符串首地址。<br>返回值：<br>    成功：读入的字符串。<br>    失败：NULL</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">string_test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">if</span> (gets(s) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用该函数会提示警告是危险的函数，可以使用 <code>fgets()</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call to <span class="string">&#x27;gets&#x27;</span> declared with attribute warning: Using gets() is always unsafe - use fgets()</span><br></pre></td></tr></table></figure>

<h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h2><p>头文件：<code>#include&lt;stdio.h&gt;</code></p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fgets</span> <span class="params">(<span class="type">char</span> *__restrict__ __s, <span class="type">int</span> __n, FILE *__restrict__ __stream)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：从<code>stream</code>指定的文件内读入字符，保存到<code>__s</code>所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了<code>size - 1</code>个字符为止，最后会自动加上字符 <code>\0</code> 作为字符串结束。</p>
<p>参数：</p>
<ul>
<li>__s 字符串</li>
<li>__n 指定最大读取字符串的长度</li>
<li>__stream 文件指针，如果读键盘输入的字符串，固定写为stdin</li>
</ul>
<p>返回值：</p>
<ul>
<li>成功 成功读取的字符串</li>
<li>读到文件尾或出错 NULL</li>
</ul>
<p>描述：</p>
<p><code>fgets()</code>在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过<code>scanf</code>和<code>gets</code>输入一个字符串的时候，不包含结尾的<code>\n</code>，但通过fgets结尾多了<code>\n</code>。<code>fgets()</code>函数是安全的，不存在缓冲区溢出的问题。</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">string_test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一些字符串：\n&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    fgets(s, <span class="keyword">sizeof</span>(s), <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\work\code\c_dev\c_learn\build\demos [main ≡ +6 ~11 -5 !]&gt; .<span class="string">&quot;E:/work/code/c_dev/c_learn/build/demos/DEMOS.exe&quot;</span></span><br><span class="line">请输入一些字符串：</span><br><span class="line">&gt;&gt;&gt;hello,world!</span><br><span class="line">hello,wor</span><br></pre></td></tr></table></figure>

<p>可以看到，如果输入的长度大于 10 时，会自动截取。</p>
<h2 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h2><p>函数原型:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str)</span>;</span><br></pre></td></tr></table></figure>

<p>在标准输出输出字符串 <code>_Str</code>，在在输出完成后自动加一个 <code>\n</code>。</p>
<p>返回值：</p>
<ul>
<li>成功 非负值</li>
<li>失败 -1</li>
</ul>
<h2 id="fputs"><a href="#fputs" class="headerlink" title="fputs()"></a>fputs()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __restrict__ _Str,FILE * __restrict__ _File)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：将<code>_Str</code>所指定的字符串写入到<code>stream</code>指定的文件中，字符串结束符<code>\0</code>不写入文件。</p>
<p>参数：</p>
<ul>
<li>_Str 要输出的字符串</li>
<li>_File 文件指针，如果把字符串输出到屏幕，固定写为<code>stdout</code>。</li>
</ul>
<p>返回值：</p>
<ul>
<li>成功 0</li>
<li>失败 -1</li>
</ul>
<p>注意：<code>fputs()</code>是<code>puts()</code>的文件操作版本，但<code>fputs()</code> 不会自动输出一个<code>\n</code>。</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;&gt;&gt;&gt; Hello,World!&quot;</span>, <span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure>

<h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h2><p>头文件：<code>#include &lt;string.h&gt;</code></p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：算指定指定字符串<code>_Str</code>的长度，不包含字符串结束符<code>\0</code>。</p>
<p>返回值：字符串的长度</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;请输入一些内容：&quot;</span>);</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; %d\n&quot;</span>, <span class="built_in">strlen</span>(s)); <span class="comment">// 获取字符串的长度</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\work\code\c_dev\c_learn\build\demos [main ≡ +6 ~11 -5 !]&gt; .<span class="string">&quot;E:/work/code/c_dev/c_learn/build/demos/DEMOS.exe&quot;</span></span><br><span class="line">请输入一些内容：</span><br><span class="line">&gt;&gt;&gt; hello</span><br><span class="line">&gt;&gt;&gt; 6</span><br></pre></td></tr></table></figure>

<h2 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy()"></a>strcpy()</h2><p>头文件：<code>#include &lt;string.h&gt;</code></p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *__restrict__ _Dest, <span class="type">const</span> <span class="type">char</span> *__restrict__ _Source)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：把<code>_Source</code>所指向的字符串复制到<code>_Dest</code>所指向的空间中，<code>\0</code>也会拷贝过去。</p>
<p>返回值：</p>
<ul>
<li>成功 返回<code>_Dest</code>字符串的首地址。</li>
<li>失败 NULL</li>
</ul>
<p class="note note-warning">注意：如果参数<b>_Dest</b>所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</p>

<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(s, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; %s\n&quot;</span>, s);</span><br></pre></td></tr></table></figure>

<h2 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy()"></a>strncpy()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> * __restrict__ __dst, <span class="type">const</span> <span class="type">char</span> * __restrict__ __src, <span class="type">size_t</span> __n)</span>;</span><br></pre></td></tr></table></figure>

<p>和 strcpy() 类似，只是多了一个参数。</p>
<p>功能：把<code>__src</code>指向字符串的前<code>n</code>个字符复制到<code>__dst</code>所指向的空间中，是否拷贝结束符看指定的长度是否包含<code>\0</code>。</p>
<p>返回值：</p>
<ul>
<li>成功 返回<code>__dst</code>字符串的首地址。</li>
<li>失败 NULL</li>
</ul>
<p class="note note-warning">
注意：strncpy() 可能会导致字符串乱码。
</p>

<h2 id="strcat"><a href="#strcat" class="headerlink" title="strcat()"></a>strcat()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">strcat</span><span class="params">(<span class="type">char</span> * __restrict__ __dst, <span class="type">const</span> <span class="type">char</span> * __restrict__ __src)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：将<code>__src</code>字符串连接到<code>__dst</code>的尾部，<code>\0</code> 也会追加过去。</p>
<p>返回值：</p>
<ul>
<li>成功 返回<code>__dst</code>字符串的首地址。</li>
<li>失败 NULL</li>
</ul>
<h2 id="strncat"><a href="#strncat" class="headerlink" title="strncat()"></a>strncat()</h2><p>功能：将<code>__src</code>字符串前<code>n</code>个字符连接到<code>__dst</code>的尾部，<code>\0</code>也会追加过去。</p>
<p>返回值：</p>
<ul>
<li>成功 返回<code>__dst</code>字符串的首地址。</li>
<li>失败 NULL</li>
</ul>
<h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str1,<span class="type">const</span> <span class="type">char</span> *_Str2)</span>;</span><br></pre></td></tr></table></figure>

<p>功能： 比较 _Str1 和 _Str2 的大小，比较的是字符ASCII码大小。</p>
<p>返回值:</p>
<ul>
<li>相等：0</li>
<li>大于：&gt;0</li>
<li>小于：&lt;0</li>
</ul>
<h2 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp()"></a>strncmp()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str1,<span class="type">const</span> <span class="type">char</span> *_Str2,<span class="type">size_t</span> _MaxCount)</span>;</span><br></pre></td></tr></table></figure>

<p>功能： 比较 _Str1 和 _Str2 前n个字符的大小，比较的是字符ASCII码大小。</p>
<h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span> <span class="params">(<span class="type">char</span> *__stream, <span class="type">const</span> <span class="type">char</span> *__format, ...)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：根据参数<code>__format</code>字符串来转换并格式化数据，然后将结果输出到<code>__stream</code>指定的空间中，直到出现字符串结束符 <code>\0</code> 为止。</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sprintf</span>(s, <span class="string">&quot;x: %d\ny: %d\n&quot;</span>, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len: %d\n&quot;</span>, len);</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br></pre></td></tr></table></figure>

<h2 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf()"></a>sscanf()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__source, <span class="type">const</span> <span class="type">char</span> *__format, ...)</span>;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;张三 15&quot;</span>;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">sscanf</span>(src, <span class="string">&quot;%s%d&quot;</span>, name, &amp;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\work\code\c_dev\c_learn\build\demos [main ≡ +6 ~11 -5 !]&gt; .<span class="string">&quot;E:/work/code/c_dev/c_learn/build/demos/DEMOS.exe&quot;</span></span><br><span class="line">张三</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/lyq105/archive/2009/11/28/1612677.html">https://www.cnblogs.com/lyq105/archive/2009/11/28/1612677.html</a></li>
</ul>
<h2 id="strchr"><a href="#strchr" class="headerlink" title="strchr()"></a>strchr()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">strchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str,<span class="type">int</span> _Val)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：在字符串<code>_Str</code>中查找字母<code>_Val</code>出现的位置。</p>
<p>返回值：</p>
<ul>
<li>成功：返回第一次出现的<code>_Val</code>地址</li>
<li>失败： <code>NULL</code></li>
</ul>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;hello123_world%你好&quot;</span>;</span><br><span class="line"><span class="type">char</span>* new_src = <span class="built_in">strchr</span>(src, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;new_src: %s\n&quot;</span>, new_src);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\work\code\c_dev\c_learn\build\demos [main ≡ +6 ~11 -5 !]&gt; .<span class="string">&quot;E:/work/code/c_dev/c_learn/build/demos/DEMOS.exe&quot;</span></span><br><span class="line">new_src: 123_world%你好</span><br></pre></td></tr></table></figure>

<h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_Str,<span class="type">const</span> <span class="type">char</span> *_SubStr)</span>;</span><br></pre></td></tr></table></figure>

<p>功能：在字符串<code>_Str</code>中查找字符串<code>_SubStr</code>出现的位置。</p>
<p>参数：</p>
<ul>
<li>_Str：源字符串首地址</li>
<li>_SubStr：匹配字符串首地址</li>
</ul>
<p>返回值：</p>
<p>成功：返回第一次出现的_SubStr地址<br>失败： NULL</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> src1[] = <span class="string">&quot;hello123_world%你好&quot;</span>;</span><br><span class="line"><span class="type">char</span> src2[] = <span class="string">&quot;o12&quot;</span>;</span><br><span class="line"><span class="type">char</span>* new_src = <span class="built_in">strstr</span>(src1, src2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;new_src: %s\n&quot;</span>, new_src);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\work\code\c_dev\c_learn\build\demos [main ≡ +6 ~11 -5 !]&gt; .<span class="string">&quot;E:/work/code/c_dev/c_learn/build/demos/DEMOS.exe&quot;</span></span><br><span class="line">new_src: o123_world%你好</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言动态数组的实现</title>
    <url>//article/dyn-array-for-c-language/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dyn_arry_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span>* <span class="built_in">array</span>;</span><br><span class="line">	<span class="type">int</span> capacity;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dyn_array_test</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">struct</span> Dyn_arry_t <span class="title function_">dyn_array_init</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">int</span> size)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dyn_array.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 初始化动态数组</span></span><br><span class="line"><span class="comment"> * @param array ：要初始化的数组</span></span><br><span class="line"><span class="comment"> * @param size ：数组的大小</span></span><br><span class="line"><span class="comment"> * @return 返回 my_array, 一个 Dyn_array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> Dyn_arry_t <span class="title function_">dyn_array_init</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 先创建一个堆栈，用来作为初始动态数组的容器</span></span><br><span class="line">	<span class="type">int</span>* temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * size * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (temp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*for (size_t i = 0; i &lt; size; i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			temp[i] = array[i];</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="built_in">memcpy</span>(temp, <span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * size);</span><br><span class="line">		<span class="comment">// 这里不能使用 memcpy 来复制 array 到 temp，在这里array 只是一个指针</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Dyn_arry_t</span> <span class="title">my_array</span>;</span></span><br><span class="line">	my_array.<span class="built_in">array</span> = temp;</span><br><span class="line">	my_array.capacity = size * <span class="number">2</span>;</span><br><span class="line">	my_array.size = size;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> my_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dyn_array_insert</span><span class="params">(<span class="keyword">struct</span> Dyn_arry_t* <span class="built_in">array</span>, <span class="type">int</span> var)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((<span class="built_in">array</span>-&gt;size) &lt; (<span class="built_in">array</span>-&gt;capacity))</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">array</span>-&gt;<span class="built_in">array</span>[<span class="built_in">array</span>-&gt;size] = var;</span><br><span class="line">		<span class="built_in">array</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;堆空间已用完\n&quot;</span>);</span><br><span class="line">		<span class="type">int</span>* temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="built_in">array</span>-&gt;capacity * <span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (temp)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">array</span>-&gt;capacity = <span class="built_in">array</span>-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">			<span class="built_in">memcpy</span>(temp, <span class="built_in">array</span>-&gt;<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="built_in">array</span>-&gt;size);</span><br><span class="line">			<span class="built_in">array</span>-&gt;<span class="built_in">array</span> = temp;</span><br><span class="line">			<span class="built_in">array</span>-&gt;<span class="built_in">array</span>[<span class="built_in">array</span>-&gt;size] = var;</span><br><span class="line">			<span class="built_in">array</span>-&gt;size++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief	动态数组测试函数</span></span><br><span class="line"><span class="comment"> * @param	none</span></span><br><span class="line"><span class="comment"> * @return	none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dyn_array_test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Line(<span class="string">&quot;动态数组测试&quot;</span>);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Dyn_arry_t</span> <span class="title">darray</span>;</span></span><br><span class="line">	<span class="comment">//int iarray[5] = &#123; 1,2,3,4,5 &#125;;</span></span><br><span class="line">	darray = dyn_array_init((<span class="type">int</span>[]) &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;, <span class="number">5</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;动态数组测试\n&quot;</span>);</span><br><span class="line">	print_array_int(darray.<span class="built_in">array</span>, darray.size); <span class="comment">// 打印数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">40</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		dyn_array_insert(&amp;darray, i - <span class="number">6</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;capacity:%d\n&quot;</span>, darray.capacity);</span><br><span class="line">	print_array_int(darray.<span class="built_in">array</span>, darray.size); <span class="comment">// 打印数组</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(darray.<span class="built_in">array</span>); <span class="comment">// 释放堆内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>FreeRTOS LED闪烁例子</title>
    <url>//article/freertos-blink-demo/</url>
    <content><![CDATA[<p>这个例子演示了基于 FreeRTOS 的闪灯程序，这里给出主要代码块。</p>
<h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">vApplicationTickHook</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  global_num_1++;</span><br><span class="line">  <span class="keyword">if</span> (global_num_1 &gt;= <span class="number">500</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    global_num_1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 给 led_task 任务发送通知</span></span><br><span class="line">    <span class="built_in">xTaskNotifyGive</span>(<span class="built_in">xTaskGetHandle</span>(<span class="string">&quot;led_task&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// @brief led FreeRTOS 任务函数</span></span><br><span class="line"><span class="comment">/// @param pvParameters</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">led_task</span><span class="params">(<span class="type">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> ul_notify_value;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        ul_notify_value = <span class="built_in">ulTaskNotifyTake</span>(pdTRUE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ul_notify_value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sys_led.<span class="built_in">toggle</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS 按键程序代码笔记</title>
    <url>//article/freertos-button/</url>
    <content><![CDATA[<p>在这里分享一个我写到基于 FreeRTOS 的按键程序，只是自己的一个思路，欢迎讨论。</p>
<h2 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// File: xtp_defines.h</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __XTP_DEFINES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __XTP_DEFINES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;at32f413.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USE_FREERTOS (1) <span class="comment">// 1:使用 FreeRTOS 0:不使用 FreeRTOS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AT32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_FREERTOS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LED</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY_PCS 2 <span class="comment">// 按键个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key_buffer_t</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer;     <span class="comment">// 按键 buff</span></span><br><span class="line">    <span class="type">bool</span> previous_state; <span class="comment">// 以前的状态</span></span><br><span class="line">    <span class="type">uint32_t</span> down_count; <span class="comment">// 按下计数（ms）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key_gpiox_t</span> &#123;</span></span><br><span class="line">    gpio_type *gpiox;</span><br><span class="line">    <span class="type">uint16_t</span> pin;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统参数结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xtp_system_t</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> global_num_1;</span><br><span class="line">    <span class="type">int32_t</span> key_count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key_buffer_t</span> <span class="title">key_buffer</span>[<span class="title">KEY_PCS</span>];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key_gpiox_t</span> <span class="title">key_gpiox</span>[<span class="title">KEY_PCS</span>];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">xtp_system_t</span> <span class="title">xtp_system</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __XTP_DEFINES_H */</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// xtp_defines.c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xtp_defines.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xtp_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> global_num_1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 定义系统参数变量 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xtp_system_t</span> <span class="title">xtp_system</span> =</span> &#123;</span><br><span class="line">    .global_num_1 = <span class="number">0</span>,</span><br><span class="line">    .key_count = <span class="number">0</span>,</span><br><span class="line">    .key_buffer = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .buffer = <span class="number">0xffff</span>,</span><br><span class="line">            .previous_state = <span class="literal">false</span>,</span><br><span class="line">            .down_count = <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            .buffer = <span class="number">0xffff</span>,</span><br><span class="line">            .previous_state = <span class="literal">false</span>,</span><br><span class="line">            .down_count = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    .key_gpiox = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .gpiox = OK_KEY_GPIOX,</span><br><span class="line">            .pin = OK_KEY_PIN</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            .gpiox = LEFT_KEY_GPIOX,</span><br><span class="line">            .pin = LEFT_KEY_PIN</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="主逻辑代码"><a href="#主逻辑代码" class="headerlink" title="主逻辑代码"></a>主逻辑代码</h2><p>主逻辑在Tick钩子函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">vApplicationTickHook</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    BaseType_t YieldRequired;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 按键处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; KEY_PCS; i++) &#123;</span><br><span class="line">        xtp_system.key_buffer[i].buffer = (xtp_system.key_buffer[i].buffer &lt;&lt; <span class="number">1</span>) |</span><br><span class="line">                                          (!io_get_level(xtp_system.key_gpiox[i].gpiox, xtp_system.key_gpiox[i].pin));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (xtp_system.key_buffer[i].buffer == (<span class="type">uint16_t</span>)<span class="number">0x0000</span>) &#123;</span><br><span class="line">            xtp_system.key_buffer[i].previous_state = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xtp_system.key_buffer[i].buffer == (<span class="type">uint16_t</span>)<span class="number">0xffff</span> &amp;&amp; xtp_system.key_buffer[i].previous_state == <span class="literal">true</span>) &#123;</span><br><span class="line">            xtp_system.key_buffer[i].previous_state = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是那个按键按下了</span></span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// OK 按键</span></span><br><span class="line">                    xTaskNotifyGive(xTaskGetHandle(<span class="string">&quot;led_task&quot;</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// LEFT 按键</span></span><br><span class="line">                    <span class="comment">// vTaskResume(xTaskGetHandle(&quot;test_task&quot;));</span></span><br><span class="line">                    YieldRequired = xTaskResumeFromISR(xTaskGetHandle(<span class="string">&quot;test_task&quot;</span>)); <span class="comment">// 恢复 test_task任务</span></span><br><span class="line">                    <span class="keyword">if</span> (YieldRequired == pdTRUE) &#123;</span><br><span class="line">                        <span class="comment">/*如果函数xTaskResumeFromISR()返回值为pdTRUE，那么说明要恢复的这个</span></span><br><span class="line"><span class="comment">                        任务的任务优先级等于或者高于正在运行的任务(被中断打断的任务),所以在</span></span><br><span class="line"><span class="comment">                        退出中断的时候一定要进行上下文切换！*/</span></span><br><span class="line">                        portYIELD_FROM_ISR(YieldRequired);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 按键抖动发生了 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS 创建任务</title>
    <url>//article/freertos-create_task/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;task.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_LED_TASK_PRIO       2   <span class="comment">/* 定义任务优先级，数字越大优先级越高 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_LED_TASK_STACK_SIZE 120 <span class="comment">/* 定义任务堆栈大小，单位为：字 */</span></span></span><br><span class="line">TaskHandle_t user_led_handle;        <span class="comment">/* 定义任务句柄 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xtp_create_task</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    xTaskCreate(</span><br><span class="line">        (TaskFunction_t)led_task,</span><br><span class="line">        (<span class="type">const</span> <span class="type">char</span> *)<span class="string">&quot;led_task&quot;</span>,</span><br><span class="line">        (<span class="type">uint16_t</span>)USER_LED_TASK_STACK_SIZE,</span><br><span class="line">        (<span class="type">void</span> *)<span class="literal">NULL</span>,</span><br><span class="line">        (UBaseType_t)USER_LED_TASK_PRIO,</span><br><span class="line">        (TaskHandle_t *)user_led_handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS 延时函数</title>
    <url>//article/freertos-delay/</url>
    <content><![CDATA[<h2 id="vTaskDelay"><a href="#vTaskDelay" class="headerlink" title="vTaskDelay()"></a>vTaskDelay()</h2><p>任务延时函数，把当前任务从运行态（就绪列表），移到延时列表。</p>
<p>参数： xTicksToDelay &gt; 延时的时间长度，单位是系统时钟节拍周期。</p>
<p>如果调用<code>vTaskDelay()</code>函数的任务在执行过程中被更高优先级的任务或者中断所打断，那么调用<code>vTaskDelay()</code>函数的任务将会受到影响，此时将不能保持一个固定的时间间隔运行。</p>
<h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vTaskDelay(<span class="number">500</span>/portTICK_PERIOD_MS);</span><br><span class="line">vTaskDelay(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> ( INCLUDE_vTaskDelay == 1 )</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">vTaskDelay</span><span class="params">( <span class="type">const</span> TickType_t xTicksToDelay )</span></span><br><span class="line">    &#123;</span><br><span class="line">        BaseType_t xAlreadyYielded = pdFALSE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* A delay time of zero just forces a reschedule. */</span></span><br><span class="line">        <span class="keyword">if</span>( xTicksToDelay &gt; ( TickType_t ) <span class="number">0U</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            configASSERT( uxSchedulerSuspended == <span class="number">0</span> );</span><br><span class="line">            vTaskSuspendAll();</span><br><span class="line">            &#123;</span><br><span class="line">                traceTASK_DELAY();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* A task that is removed from the event list while the</span></span><br><span class="line"><span class="comment">                 * scheduler is suspended will not get placed in the ready</span></span><br><span class="line"><span class="comment">                 * list or removed from the blocked list until the scheduler</span></span><br><span class="line"><span class="comment">                 * is resumed.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * This task cannot be in an event list as it is the currently</span></span><br><span class="line"><span class="comment">                 * executing task. */</span></span><br><span class="line">                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );</span><br><span class="line">            &#125;</span><br><span class="line">            xAlreadyYielded = xTaskResumeAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Force a reschedule if xTaskResumeAll has not already done so, we may</span></span><br><span class="line"><span class="comment">         * have put ourselves to sleep. */</span></span><br><span class="line">        <span class="keyword">if</span>( xAlreadyYielded == pdFALSE )</span><br><span class="line">        &#123;</span><br><span class="line">            portYIELD_WITHIN_API();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* INCLUDE_vTaskDelay */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="vTaskDelayUntil"><a href="#vTaskDelayUntil" class="headerlink" title="vTaskDelayUntil()"></a>vTaskDelayUntil()</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">vTaskDelayUntil</span><span class="params">( portTickType *pxPreviousWakeTime, portTickType xTimeIncrement )</span>;</span><br></pre></td></tr></table></figure>

<h3 id="参数-pxPreviousWakeTime"><a href="#参数-pxPreviousWakeTime" class="headerlink" title="参数 pxPreviousWakeTime"></a>参数 pxPreviousWakeTime</h3><p><code>pxPreviousWakeTime</code>：指针，指向一个变量，该变量保存任务最后一次解除阻塞的时间。第一次使用前，该变量必须初始化为当前时间。之后这个变量会在<code>vTaskDelayUntil()</code>函数内自动更新。</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test_task</span><span class="params">(<span class="type">void</span> *pvParameters)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> portTickType xLastWakeTime;</span><br><span class="line"></span><br><span class="line">    xLastWakeTime = xTaskGetTickCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;test_task()&quot;</span>);</span><br><span class="line">        sys_led.toggle();</span><br><span class="line">        vTaskDelayUntil(&amp;xLastWakeTime, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vTaskDelete(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS钩子函数</title>
    <url>//article/freertos-hook-function/</url>
    <content><![CDATA[<p>FreeRTOS 中的钩子函数和中断的回调函数很像，钩子函数的名字是固定的，在特定事件下会自动执行响应名字的钩子函数，并且钩子函数是可剪裁的，在 FreeRTOSConfig.h中配置是否启用特定的钩子函数。</p>
<h2 id="vApplicationTickHook"><a href="#vApplicationTickHook" class="headerlink" title="vApplicationTickHook"></a>vApplicationTickHook</h2><p>节拍中断可以选择是否回调一个钩子函数，这个钩子函数允许实现一些周期性的功能。</p>
<p>使用节拍中断钩子函数，需要将 <code>configUSE_TICK_HOOK</code>设置为1，同时钩子函数申明为如下原型：</p>
<p><code>void vApplicationTickHook( void )</code></p>
<p>这个钩子函数必须很短且占用堆栈空间很少，因为这是在中断中调用的函数，同时，只能调用以<strong>FromISR</strong>结尾的<strong>API</strong>函数。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS 任务挂起与任务恢复</title>
    <url>//article/freertos-task-suspend-resume/</url>
    <content><![CDATA[<p>FreeRTOS 的任务有几种状态，并且这几种状态可以相互转换，下面是转换图：</p>
<p><img src="/img/post_img/freertos-task-state.png" alt="转换图"></p>
<p>任务的4个状态：</p>
<ul>
<li>运行态</li>
<li>就绪态，指准备好了，可以随时运行</li>
<li>阻塞态</li>
<li>挂起态</li>
</ul>
<h2 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h2><p>当任务实际执行时，它被称为处于运行状态。 任务当前正在使用处理器。 如果运行 <code>RTOS</code> 的处理器只有一个内核， 那么在任何给定时间内都只能有一个任务处于运行状态。</p>
<h2 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h2><p>准备就绪任务指那些能够执行（它们不处于阻塞或挂起状态）， 但目前没有执行的任务， 因为同等或更高优先级的不同任务已经处于运行状态。</p>
<h2 id="阻塞态"><a href="#阻塞态" class="headerlink" title="阻塞态"></a>阻塞态</h2><p>如果任务当前正在等待时间或外部事件，则该任务被认为处于阻塞状态。 例如，如果一个任务调用<code>vTaskDelay()</code>，它将被阻塞（被置于阻塞状态）， 直到延迟结束-一个时间事件。 任务也可以通过阻塞来等待队列、信号量、事件组、通知或信号量 事件。 处于阻塞状态的任务通常有一个”超时”期， 超时后任务将被超时，并被解除阻塞， 即使该任务所等待的事件没有发生。</p>
<p><code>阻塞</code>状态下的任务不使用任何处理时间，不能 被选择进入运行状态。</p>
<h2 id="挂起态-Blocked"><a href="#挂起态-Blocked" class="headerlink" title="挂起态 Blocked"></a>挂起态 Blocked</h2><p>与<strong>阻塞</strong>状态下的任务一样， <strong>挂起</strong>状态下的任务不能 被选择进入运行状态，但处于挂起状态的任务 没有超时。 相反，任务只有在分别通过 <code>vTaskSuspend()</code> 和 <code>xTaskResume()</code> API 调用明确命令时 才会进入或退出挂起状态。</p>
<p>有其他状态变为挂起态只能使用 <code>vTaskSuspend()</code>。</p>
<p>恢复挂起态用 <code>xTaskResume()</code> 或 <code>xTaskResumeFromISR()</code>。</p>
<p>在中断中恢复挂起态的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部中断4服务程序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    BaseType_t YieldRequired;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vTaskDelay(10);   //消抖-------//中断函数中不可以使用vTaskDelay()！！！</span></span><br><span class="line">    <span class="keyword">if</span>(KEY0==<span class="number">0</span>)  </span><br><span class="line">    &#123;           </span><br><span class="line">        <span class="comment">//vTaskResume(Task2Task_Handler);//这里必须使用FromISR版本的！！！  </span></span><br><span class="line">        YieldRequired=xTaskResumeFromISR(Task2Task_Handler);<span class="comment">//恢复任务2</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2 resume\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(YieldRequired==pdTRUE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*如果函数xTaskResumeFromISR()返回值为pdTRUE，那么说明要恢复的这个</span></span><br><span class="line"><span class="comment">            任务的任务优先级等于或者高于正在运行的任务(被中断打断的任务),所以在</span></span><br><span class="line"><span class="comment">            退出中断的时候一定要进行上下文切换！*/</span></span><br><span class="line">            portYIELD_FROM_ISR(YieldRequired);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">    EXTI_ClearITPendingBit(EXTI_Line4);<span class="comment">//清除LINE4上的中断标志位  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//article/hello-world/</url>
    <content><![CDATA[<p>该文件是 <code>hexo</code> 中默认生成第一篇文章，在此我进行了升级，用该文章记录一些 <code>hexo</code> 使用的笔记。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hexo</span> deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="关于搜索"><a href="#关于搜索" class="headerlink" title="关于搜索"></a>关于搜索</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E6%90%9C%E7%B4%A2">https://butterfly.js.org/posts/ceeb73f/#%E6%90%9C%E7%B4%A2</a></p>
<p>我用的<code>hexo</code>主题是 <code>buterfly</code> 该主题支持几种搜索，这里我选用了最简单的 <code>local_search</code> 具体的配置是：</p>
<ol>
<li><p>安装 <a href="https://github.com/next-theme/hexo-generator-searchdb" title="hexo-generator-searchdb"><code>hexo-generator-searchdb</code></a></p>
</li>
<li><p>配置主题的 search use 为: &#96;local_search’ 代码如下：</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="attr">search:</span></span><br><span class="line"><span class="comment"># Choose: algolia_search / local_search / docsearch</span></span><br><span class="line"><span class="comment"># leave it empty if you don&#x27;t need search</span></span><br><span class="line"><span class="attr">use:</span> <span class="string">local_search</span></span><br><span class="line"><span class="attr">placeholder:</span> <span class="string">搜索</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure>

<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post -p front-end/nvm-node-manage <span class="string">&quot;用 NVM 管理 npm 和 node 的版本&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>KiCAD 官方库笔记</title>
    <url>//article/kicad-lib-note/</url>
    <content><![CDATA[<ul>
<li>Symbol 一些标志丝印，如：<code>CE/ESD/FCC/KiCad/OSHW</code> 等<code>Logo</code>。</li>
<li>TerminalBlock_Altech P5.0mm 45度端子<ul>
<li><img src="/img/post_img/altech_AK300_1.png" alt="altech_AK300_1"></li>
</ul>
</li>
<li>TerminalBlock_Phoenix 5.08 绿色端子<ul>
<li><img src="/img/post_img/TerminalBlock_Phoenix.png" alt="TerminalBlock_Phoenix"></li>
</ul>
</li>
<li>TestPoint 测试点<ul>
<li><img src="/img/post_img/test_point.png" alt="test_point"></li>
</ul>
</li>
<li>Valve 电子管</li>
<li>Varistor 压敏电阻插件<ul>
<li><img src="/img/post_img/Varistor.png" alt="Varistor"></li>
</ul>
</li>
<li>Sensor 传感器</li>
<li>Rotary_Encoder 旋转编码器，EC11等</li>
<li>FR_Shielding 屏蔽罩</li>
<li>FR_Module 常见射频模块，如：ESP32模块等</li>
<li>Resistor_THT 插件电阻</li>
<li>Resistor_SMD 贴片电阻</li>
<li>Relay_THT 插件继电器</li>
<li>Relay_SMD 贴片继电器</li>
<li>Potentiometer_THT 插件电位器</li>
<li>Potentiometer_SMD 贴片电位器</li>
<li>Package_TO_SOT_THT TO和SOT系列封装插件版，TO-220等</li>
<li>Package_TO_SOT_SMD TO和SOT系列封装贴片版，SOT-223-5等</li>
<li>Package_SO SO封装</li>
<li>Package_SON SON封装</li>
<li>Package_SIP SIP 封装</li>
<li>Package_QFP LQFP\EQFP 封装</li>
<li>Package_LGA LGA 封装</li>
<li>Package_LCC LCC 封装</li>
<li>Package_DIP DIP 封装</li>
<li>Package_DFN_QFN QFN 封装</li>
<li>Package_CSP CSP封装</li>
<li>Package_BGA BGA 封装</li>
<li>Oscillator 振荡器晶振</li>
<li>OptoDevice 光电子器件，光纤口等</li>
<li>NetTie 上下连接好的焊盘</li>
<li>Mounting_Wuerth 安装柱</li>
<li>MountingHole 安装孔</li>
<li>LED_THT 插件LED</li>
<li>LED_SMD 贴片LED</li>
<li>Jumper 跳线</li>
<li>Inductor_THT和Inductor_THT_Wurth 插件电感</li>
<li>Inductor_SMD和Inductor_SMD_Wurth 贴片电感</li>
<li>Heatsink 散热片</li>
<li>Fuse 保险丝座</li>
<li>Filter 滤波器</li>
<li>Fiducial 基准点，贴片时对焦用</li>
<li>Display_7Segment 数码管</li>
<li>Display 液晶屏</li>
<li>Diode_THT 插件二极管整流桥</li>
<li>Diode_SMD 贴片二极管整流桥</li>
<li>Crystal 晶振</li>
<li>Connector_Wire 焊锡线的焊盘，带固定孔</li>
<li>Connector_USB USB座</li>
<li>Connector_PinSocket_xxxx 排母</li>
<li>Connector_PinHeader_xxxx 排针</li>
<li>Connector_Phoenix_MSTB 5.08mm 绿色端子座</li>
<li>Connector_Molex MX1.25mm,MX2.0mm,MX1.5mm,MX2.54mm,MX3.96mm 等规格端子</li>
<li>Connector_JST JST和XH端子 XH2.54等<ul>
<li><img src="/img/post_img/JST.png" alt="JST"></li>
<li><img src="/img/post_img/xh254.png" alt="XH"></li>
</ul>
</li>
<li>Connector_IDC 牛角座</li>
<li>Connector_FFC-FPC FPC座</li>
<li>Connector_Coaxial 同轴光缆座，SMA\BNC等</li>
<li>Connector_Card 各种卡座，SD卡等</li>
<li>Connector_BarrelJack 各种电源座</li>
<li>Connector_Audio 各种音频接口</li>
<li>Connector_AMASS 电池座 XT60等</li>
<li>Capacitor_THT 插件电容</li>
<li>Capacitor_SMD 贴片电容</li>
<li>Capacitor_Tantalum_SMD 钽电容</li>
<li>Buzzer 蜂鸣器</li>
<li>Button_Switch_THT 插件按键开关</li>
<li>Button_Switch_SMD 贴片按键开关</li>
<li>Battery 电池座等</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>电路设计</category>
      </categories>
      <tags>
        <tag>KiCad</tag>
      </tags>
  </entry>
  <entry>
    <title>LTspice 界面相关翻译</title>
    <url>//article/ltspice-txt-to-cn/</url>
    <content><![CDATA[<h2 id="编辑仿真命令对话框"><a href="#编辑仿真命令对话框" class="headerlink" title="编辑仿真命令对话框"></a>编辑仿真命令对话框</h2><h3 id="瞬态分析"><a href="#瞬态分析" class="headerlink" title="瞬态分析"></a>瞬态分析</h3><p><img src="/img/post_img/%E7%BC%96%E8%BE%91%E4%BB%BF%E7%9C%9F%E5%91%BD%E4%BB%A4%E5%AF%B9%E8%AF%9D%E6%A1%861.png" alt="瞬态分析"></p>
<h3 id="交流分析"><a href="#交流分析" class="headerlink" title="交流分析"></a>交流分析</h3><p><img src="/img/post_img/%E7%BC%96%E8%BE%91%E4%BB%BF%E7%9C%9F%E5%91%BD%E4%BB%A4%E5%AF%B9%E8%AF%9D%E6%A1%862.png" alt="交流分析"></p>
<h3 id="直流扫描"><a href="#直流扫描" class="headerlink" title="直流扫描"></a>直流扫描</h3><p><img src="/img/post_img/%E7%9B%B4%E6%B5%81%E6%89%AB%E6%8F%8F.png" alt="直流扫描"></p>
<h3 id="噪声分析"><a href="#噪声分析" class="headerlink" title="噪声分析"></a>噪声分析</h3><p><img src="/img/post_img/%E5%99%AA%E5%A3%B0.png" alt="噪声分析"></p>
<h3 id="直流转换"><a href="#直流转换" class="headerlink" title="直流转换"></a>直流转换</h3><p><img src="/img/post_img/%E7%9B%B4%E6%B5%81%E8%BD%AC%E6%8D%A2.png" alt="直流转换"></p>
<h3 id="直流静态工作点"><a href="#直流静态工作点" class="headerlink" title="直流静态工作点"></a>直流静态工作点</h3><p><img src="/img/post_img/%E7%9B%B4%E6%B5%81%E9%9D%99%E6%80%81%E5%B7%A5%E4%BD%9C%E7%82%B9.png" alt="直流静态工作点"></p>
<h3 id="瞬态频率响应分析"><a href="#瞬态频率响应分析" class="headerlink" title="瞬态频率响应分析"></a>瞬态频率响应分析</h3><p><img src="/img/post_img/%E7%9E%AC%E6%80%81%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94%E5%88%86%E6%9E%90.png" alt="瞬态频率响应分析"></p>
]]></content>
      <categories>
        <category>电路设计</category>
      </categories>
      <tags>
        <tag>LTspice</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Vim配置文件</title>
    <url>//article/my-vim-config/</url>
    <content><![CDATA[<p>我的配置文件如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"><span class="comment">&quot; The default plugin directory will be as follows:</span></span><br><span class="line"><span class="comment">&quot;   - Vim (Linux/macOS): &#x27;~/.vim/plugged&#x27;</span></span><br><span class="line"><span class="comment">&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span></span><br><span class="line"><span class="comment">&quot;   - Neovim (Linux/macOS/Windows): stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27;</span></span><br><span class="line"><span class="comment">&quot; You can specify a custom plugin directory by passing it as the argument</span></span><br><span class="line"><span class="comment">&quot;   - e.g. `call plug#begin(&#x27;~/.vim/plugged&#x27;)`</span></span><br><span class="line"><span class="comment">&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Make sure you use single quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span></span><br><span class="line">Plug <span class="string">&#x27;junegunn/vim-easy-align&#x27;</span></span><br><span class="line"><span class="comment">&quot; base16配色</span></span><br><span class="line">Plug <span class="string">&#x27;chriskempson/base16-vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Any valid git URL is allowed</span></span><br><span class="line">Plug <span class="string">&#x27;https://github.com/junegunn/vim-github-dashboard.git&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Multiple Plug commands can be written in a single line using | separators</span></span><br><span class="line">Plug <span class="string">&#x27;SirVer/ultisnips&#x27;</span> | Plug <span class="string">&#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; On-demand loading</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fireplace&#x27;</span>, &#123; <span class="string">&#x27;for&#x27;</span>: <span class="string">&#x27;clojure&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Using a tagged release; wildcard allowed (requires git 1.9.2 or above)</span></span><br><span class="line">Plug <span class="string">&#x27;fatih/vim-go&#x27;</span>, &#123; <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;*&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Plugin options</span></span><br><span class="line">Plug <span class="string">&#x27;nsf/gocode&#x27;</span>, &#123; <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;v.20150303&#x27;</span>, <span class="string">&#x27;rtp&#x27;</span>: <span class="string">&#x27;vim&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Plugin outside ~/.vim/plugged with post-update hook</span></span><br><span class="line">Plug <span class="string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="string">&#x27;dir&#x27;</span>: <span class="string">&#x27;~/.fzf&#x27;</span>, <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;./install --all&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Unmanaged plugin (manually installed and updated)</span></span><br><span class="line">Plug <span class="string">&#x27;~/my-prototype-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Initialize plugin system</span></span><br><span class="line"><span class="comment">&quot; - Automatically executes `filetype plugin indent on` and `syntax enable`.</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot; You can revert the settings after the call like so:</span></span><br><span class="line"><span class="string">&quot;   filetype indent off   &quot;</span> Disable <span class="keyword">file</span>-<span class="built_in">type</span>-specific indentation</span><br><span class="line"><span class="string">&quot;   syntax off            &quot;</span> Disable <span class="keyword">syntax</span> highlighting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> nocompatible <span class="comment">&quot;设置和其他Vim改型的不兼容性</span></span><br><span class="line"><span class="keyword">set</span> termguicolors</span><br><span class="line"><span class="keyword">let</span> base16colorspace=<span class="number">256</span>  <span class="comment">&quot; Access colors present in 256 colorspace</span></span><br><span class="line"><span class="keyword">colorscheme</span> base16-solarized-dark <span class="comment">&quot;配色设置</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> autoindent <span class="comment">&quot;自动缩进</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span> <span class="comment">&quot;语法高亮</span></span><br><span class="line"><span class="keyword">filetype</span> <span class="built_in">indent</span> <span class="keyword">on</span> <span class="comment">&quot;文件类型检查</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span> <span class="comment">&quot;显示状态栏</span></span><br><span class="line"><span class="keyword">set</span> statusline=%F%<span class="keyword">m</span>%r%h%<span class="keyword">w</span>%=(%&#123;&amp;ff&#125;/%Y)\ (<span class="built_in">line</span>\ %<span class="keyword">l</span>\/%L,\ <span class="keyword">col</span>\ %<span class="keyword">c</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> relativenumber <span class="comment">&quot;相对行号</span></span><br><span class="line"><span class="keyword">set</span> cursorline <span class="comment">&quot;高亮当前行</span></span><br><span class="line"><span class="keyword">set</span> wildmenu <span class="string">&quot;能够自动补全显示命令行语句，并可利用&quot;</span>Tab<span class="comment">&quot;键进行相应的选择</span></span><br><span class="line"><span class="keyword">set</span> textwidth=<span class="number">80</span> <span class="comment">&quot;设置行宽</span></span><br><span class="line"><span class="keyword">set</span> nowrap <span class="comment">&quot;关闭自动折行</span></span><br><span class="line"><span class="keyword">set</span> scrolloff=<span class="number">5</span> <span class="comment">&quot;垂直滚动时，光标距离顶部/底部的位置（行）</span></span><br><span class="line"><span class="keyword">set</span> wrapmargin=<span class="number">2</span> <span class="comment">&quot;指定折行与编辑器窗口的右边缘之间空出的字符数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> sidescrolloff=<span class="number">15</span> <span class="comment">&quot;水平滚动时，光标距离行首或行尾的位置（字符）,关闭折行时有效</span></span><br><span class="line"><span class="keyword">set</span> showmatch <span class="comment">&quot;光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个括号</span></span><br><span class="line"><span class="comment">&quot;-----------搜索配置-------------</span></span><br><span class="line"><span class="keyword">set</span> hlsearch <span class="comment">&quot;搜索时高亮显示匹配结果</span></span><br><span class="line"><span class="keyword">set</span> incsearch <span class="comment">&quot;输入搜索模式时，每输入一个字符，就自动跳转到第一个匹配的结果</span></span><br><span class="line"><span class="keyword">set</span> ignorecase <span class="comment">&quot;搜索时忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> smartcase</span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span> <span class="comment">&quot;使用UTF-8</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">undofile</span> <span class="comment">&quot;保留撤销历史，文件关闭后在此打开依然可以撤销关闭前的操作</span></span><br><span class="line"><span class="keyword">set</span> visualbell <span class="comment">&quot;出错时，发出视觉提示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">1000</span> <span class="comment">&quot;历史记录次数</span></span><br><span class="line"><span class="keyword">set</span> autoread <span class="comment">&quot;外部编辑文件时发出提示</span></span><br><span class="line"><span class="keyword">set</span> title</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">has</span>(<span class="string">&quot;win32&quot;</span>||<span class="built_in">has</span>(<span class="string">&quot;win64&quot;</span>)))</span><br><span class="line">        <span class="comment">&quot;Windows平台</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">&quot; 其他平台</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> autochdir <span class="comment">&quot;自动切换工作目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;配置前缀键</span></span><br><span class="line"><span class="keyword">let</span> mapleader = <span class="string">&quot;\&lt;space&gt;&quot;</span></span><br><span class="line"><span class="keyword">inoremap</span> jk <span class="symbol">&lt;Esc&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;space&gt;</span> :</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>s :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>q :q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">1</span> :b1<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">2</span> :b2<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">3</span> :b3<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">4</span> :b4<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">5</span> :b5<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">6</span> :b6<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">7</span> :b7<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">8</span> :b8<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="number">9</span> :b9<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> H ^</span><br><span class="line"><span class="keyword">nnoremap</span> L $</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>U gU <span class="comment">&quot;转换大写</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">u</span> <span class="keyword">gu</span> <span class="comment">&quot;转为小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-k&gt;</span> <span class="symbol">&lt;Up&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-j&gt;</span> <span class="symbol">&lt;Down&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-a&gt;</span> <span class="symbol">&lt;Home&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-e&gt;</span> <span class="symbol">&lt;End&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-j&gt;</span> <span class="symbol">&lt;t_kd&gt;</span> <span class="comment">&quot;切换到下一条命令</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-k&gt;</span> <span class="symbol">&lt;t_ku&gt;</span> <span class="comment">&quot;切换到上一条命令</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-a&gt;</span> <span class="symbol">&lt;Home&gt;</span> <span class="comment">&quot;转到行首</span></span><br><span class="line"><span class="keyword">cnoremap</span> <span class="symbol">&lt;C-e&gt;</span> <span class="symbol">&lt;End&gt;</span> <span class="comment">&quot;转到行尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 窗口切换</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">j</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">j</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">k</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">k</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>h <span class="symbol">&lt;C-w&gt;</span>h</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">l</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; vim-easy-align 对齐插件配置</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>ga <span class="symbol">&lt;Plug&gt;</span>(EasyAlign)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NerdTree 插件配置</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>n :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="超级用户权限编辑"><a href="#超级用户权限编辑" class="headerlink" title="超级用户权限编辑"></a>超级用户权限编辑</h2><p><code>Vim</code> 在编辑系统配置文件时经常会使用到，你也许也碰到过对一个文件编辑完成之<br>后才发现自己没有权限写这个文件。这个时候你只能使用 <code>q!</code> 丢弃编辑内容然后重 新以<br><code>sudo</code> 权限编辑文件。</p>
<p>幸运的是，就连这么蛋疼的问题，<code>Vim</code> 也有解决的办法，你可以使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">w !sudo tee &gt;/dev/null %</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 笔记之错误处理</title>
    <url>//article/rust-error-manage/</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">result_test</span>(i: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;&amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">result_test</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(a.<span class="title function_ invoke__">is_ok</span>(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> a &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(v) =&gt; &#123;<span class="built_in">println!</span>(<span class="string">&quot;v: &#123;v&#125;&quot;</span>)&#125;,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;<span class="built_in">println!</span>(<span class="string">&quot;e: &#123;e&#125;&quot;</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://doc.rust-lang.org/std/result/enum.Result.html">https://doc.rust-lang.org/std/result/enum.Result.html</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 笔记之常量与变量</title>
    <url>//article/rust-const-variable/</url>
    <content><![CDATA[<p>Rust 中变量和常量的概念，变量分为可变变量和不可变变量，常量用 const 定义。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;/////////////////////////////////////////&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;==============Hello, world!==============&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;/////////////////////////////////////////&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// x 不可变，自动类型推导为 i32</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f64</span> = <span class="number">12.325</span>; <span class="comment">// y 不可变，显式指定类型为 f64, 带小数点的默认自动为 f64</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z</span>: <span class="type">f64</span>; <span class="comment">// z 可变，值可变，在定义时不给初始化则必须指定变量的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y: &#123;y&#125;&quot;</span>);</span><br><span class="line">    z = <span class="number">100.0</span>;</span><br><span class="line">    z = (x <span class="keyword">as</span> <span class="type">f64</span>) + y + z;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;z: &#123;z&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 再次定义变量 x，在 Rust 中称为隐藏（Shadowing）</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;x&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> PI: <span class="type">f64</span> = <span class="number">3.14</span>; <span class="comment">// const 常量的定义必须显式指定类型。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;PI: &#123;PI&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 简单输入输出以及读取文件 - 例子代码</title>
    <url>//article/rust-stdio-file-demo/</url>
    <content><![CDATA[<p>在这里分享一个我写的 <code>Rust</code> 例子，用到了输入输出和文件读取。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// # 学习 Rust 中的标准输入</span></span><br><span class="line"><span class="comment">/// 首先我们要导入 stdin</span></span><br><span class="line"><span class="comment">/// `use std::io::stdin`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, stdin&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请输入一些内容个 hello 变量：&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hello</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> hello)?; <span class="comment">// 程序运行到这里会停住等你输入文字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印 hello 变量</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;variable hello&gt;&gt;&gt;: &#123;hello&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里多提供一个例子</span></span><br><span class="line">    <span class="comment">// 这个例子是从文件读取内容到变量中去</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;foo.txt&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buffer</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> buffer)?;</span><br><span class="line">    <span class="comment">// 打印 buffer 里读到的内容</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;buffer&gt;&gt;&gt; &#123;buffer&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 消息框例子</title>
    <url>//article/wpf-message-box/</url>
    <content><![CDATA[<p>这篇文章记录了 <code>WPF</code> 中的 <code>MessageBox</code> 的使用，给出了详细的代码例子。</p>
<h2 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Dialogs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">messageBoxHandle</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">string</span> title = <span class="string">&quot;黑夜望月&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span> (textBox.Text)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Ok&quot;</span>:</span><br><span class="line">                    <span class="keyword">var</span> result4 = MessageBox.Show(<span class="string">&quot;您购买的图灵电子书仅供您个人使用，未经授权，不得以任何方式复制\r\n和传播本书内容。&quot;</span>, title, MessageBoxButton.OK);</span><br><span class="line">                    boxResult.Content = result4;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;YesNo&quot;</span>:</span><br><span class="line">                    <span class="keyword">var</span> result2 = MessageBox.Show(<span class="string">&quot;您购买的图灵电子书仅供您个人使用，未经授权，不得以任何方式复制\r\n和传播本书内容。&quot;</span>, title, MessageBoxButton.YesNo);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">switch</span> (result2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.Yes:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 Yes&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.No:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 No&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="literal">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;OKCancel&quot;</span>:</span><br><span class="line">                    <span class="keyword">var</span> result1 = MessageBox.Show(<span class="string">&quot;您购买的图灵电子书仅供您个人使用，未经授权，不得以任何方式复制\r\n和传播本书内容。&quot;</span>, title, MessageBoxButton.OKCancel);</span><br><span class="line">                    <span class="keyword">switch</span> (result1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.OK:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 OK&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.Cancel:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 Cancel&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="literal">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;YesNoCancel&quot;</span>:</span><br><span class="line">                    <span class="keyword">var</span> result3 = MessageBox.Show(<span class="string">&quot;您购买的图灵电子书仅供您个人使用，未经授权，不得以任何方式复制\r\n和传播本书内容。&quot;</span>, title, MessageBoxButton.YesNoCancel);</span><br><span class="line">                    <span class="keyword">switch</span> (result3)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.Yes:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 OK&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.Cancel:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 Cancel&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> MessageBoxResult.No:</span><br><span class="line">                            boxResult.Content = <span class="string">&quot;您选择了 No&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="literal">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Yes-消息框"><a href="#Yes-消息框" class="headerlink" title="Yes 消息框"></a>Yes 消息框</h2><p><img src="/img/post_img/wpf-message-box-1.png" alt="Yes 消息框"></p>
<h2 id="YesNo-消息框"><a href="#YesNo-消息框" class="headerlink" title="YesNo 消息框"></a>YesNo 消息框</h2><p><img src="/img/post_img/wpf-message-box-2.png" alt="YesNo 消息框"></p>
<h2 id="YesNoCancel-消息框"><a href="#YesNoCancel-消息框" class="headerlink" title="YesNoCancel 消息框"></a>YesNoCancel 消息框</h2><p><img src="/img/post_img/wpf-message-box-3.png" alt="YesNoCancel 消息框"></p>
<h2 id="OkCancel-消息框"><a href="#OkCancel-消息框" class="headerlink" title="OkCancel 消息框"></a>OkCancel 消息框</h2><p><img src="/img/post_img/wpf-message-box-4.png" alt="OkCancel 消息框"></p>
<h2 id="消息框图标"><a href="#消息框图标" class="headerlink" title="消息框图标"></a>消息框图标</h2><p>我们可以给消息框提供一个图标选项，图标类如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MessageBoxImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//消息框不包含符号。</span></span><br><span class="line">    None = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 显示错误图标</span></span><br><span class="line">    Error = <span class="number">16</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of a white X in a circle with a</span></span><br><span class="line">    <span class="comment">//     red background.</span></span><br><span class="line">    Hand = <span class="number">16</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of white X in a circle with a red</span></span><br><span class="line">    <span class="comment">//     background.</span></span><br><span class="line">    Stop = <span class="number">16</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of a question mark in a circle.</span></span><br><span class="line">    <span class="comment">//     The question mark message icon is no longer recommended because it does not clearly</span></span><br><span class="line">    <span class="comment">//     represent a specific type of message and because the phrasing of a message as</span></span><br><span class="line">    <span class="comment">//     a question could apply to any message type. In addition, users can confuse the</span></span><br><span class="line">    <span class="comment">//     question mark symbol with a help information symbol. Therefore, do not use this</span></span><br><span class="line">    <span class="comment">//     question mark symbol in your message boxes. The system continues to support its</span></span><br><span class="line">    <span class="comment">//     inclusion only for backward compatibility.</span></span><br><span class="line">    Question = <span class="number">32</span>, <span class="comment">// 问号</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of an exclamation point in a triangle</span></span><br><span class="line">    <span class="comment">//     with a yellow background.</span></span><br><span class="line">    Exclamation = <span class="number">48</span>, <span class="comment">// 感叹号</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of an exclamation point in a triangle</span></span><br><span class="line">    <span class="comment">//     with a yellow background.</span></span><br><span class="line">    Warning = <span class="number">48</span>,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of a lowercase letter i in a circle.</span></span><br><span class="line">    Asterisk = <span class="number">64</span>, <span class="comment">// 星号</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     The message box contains a symbol consisting of a lowercase letter i in a circle.</span></span><br><span class="line">    Information = <span class="number">64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result4 = MessageBox.Show(<span class="string">&quot;您购买的图灵电子书仅供您个人使用，未经授权，不得以任何方式复制\r\n和传播本书内容。&quot;</span>, title, MessageBoxButton.OK, MessageBoxImage.Question);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 样式小记</title>
    <url>//article/wpf-style/</url>
    <content><![CDATA[<p>WPF 中的 Style 和 html 中的 css 是类似的东西，都是定义UI样式，WPF 中的样式可以继承，下面就来了解下 WPF 中的样式使用方法。</p>
<h2 id="定义一个简单的样式"><a href="#定义一个简单的样式" class="headerlink" title="定义一个简单的样式"></a>定义一个简单的样式</h2><p>这里我们给所有的 Button 定义一个样式，类似与 CSS 中的元素选择器，这里我们选择的元素就是 WPF 中的 Button。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;Style.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Style&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是没有使用样式的代码，显示效果如下图。</p>
<p><img src="/img/post_img/wpf-style-1.png" alt="wpf-style-1"></p>
<p>使用样式的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;Style.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Style&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF109895&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.65&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFF9F9E1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/wpf-style-2.png" alt="wpf-style-2"></p>
<p>样式是要定义到布局元素上的，如：Grid、Window等都可以，这里写到了 Grid.Resources 下，这些样式只对 Grid 下的子元素有效。</p>
<p>这里在 Style 里指定 <code>TargetType=&quot;Button&quot;</code> 来设置所有 Button 的样式，我们也可以个某个 Button 设置不同的样式，这里会用到继承。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;Style.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Style&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;LeftMarginButtonBase&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;12,0,0,0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF109895&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.65&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFF9F9E1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Key</span>=<span class="string">&quot;RedButton&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BasedOn</span>=<span class="string">&quot;&#123;StaticResource LeftMarginButtonBase&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Key</span>=<span class="string">&quot;YellowButton&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BasedOn</span>=<span class="string">&quot;&#123;StaticResource LeftMarginButtonBase&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Yellow&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource RedButton&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource YellowButton&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/wpf-style-3.png" alt="wpf-style-3"></p>
<p>这个例子中定义了一个带左侧<strong>Margin</strong>的<strong>Button</strong>基础样式<strong>LeftMarginButtonBase</strong>。</p>
<div class="note warning flat"><p><code>Padding,Margin</code></p>
<p>可以整体对左上右下四个方向设置间距，也可以对每个方向设置不同的间距。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;12,13,14,15&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>左：12</li>
<li>上：13</li>
<li>右：14</li>
<li>下：15</li>
</ul>
</div>

<h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><p>WPF（Windows Presentation Foundation）中有多种画刷类型，用于填充形状、文本或其他可绘制的元素。以下是几种常见的画刷类型：</p>
<h3 id="实心画刷（SolidColorBrush）"><a href="#实心画刷（SolidColorBrush）" class="headerlink" title="实心画刷（SolidColorBrush）"></a>实心画刷（SolidColorBrush）</h3><p>实心画刷例子如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF109895&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.65&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFF9F9E1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实心画刷可以设置<code>Color</code>和<code>Opacity</code>两个属性。</p>
<h3 id="梯度画刷（GradientBrush）"><a href="#梯度画刷（GradientBrush）" class="headerlink" title="梯度画刷（GradientBrush）"></a>梯度画刷（GradientBrush）</h3><p><code>GradientStop</code>：这是用于定义渐变的颜色和位置的对象。其中，<code>Offset</code> 属性指定梯度停止点的颜色在渐变轴上的位置。偏移量是一个介于 <code>0</code> 到 <code>1</code> 之间的双精度值。梯度停止点的偏移值越接近 <code>0</code>，颜色就越接近渐变的<strong>起点</strong>。</p>
<h4 id="LinearGradientBrush-线性渐变"><a href="#LinearGradientBrush-线性渐变" class="headerlink" title="LinearGradientBrush 线性渐变"></a>LinearGradientBrush 线性渐变</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1,0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Yellow&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>StartPoint</code><ul>
<li>渐变画刷的起点，默认规定起点坐标是(0,0)。注：这里的 0 是指整个长度的0%的位置，而不是坐标为0。</li>
</ul>
</li>
<li><code>EndPoint</code><ul>
<li>渐变画刷的终点，默认规定终点坐标是(1,1)。注：这里的1是指整个长度的<code>100%</code>的位置，而不是坐标为1。</li>
</ul>
</li>
<li><code>MappingMode</code><ul>
<li>指定渐变画笔的定位坐标解释方式。</li>
<li>可选值：<code>RelativeToBoundingBox</code>(默认)和<code>Absolute</code>。</li>
<li>首先确定元素的大小 <code>Width=100,Height=50</code></li>
<li>值为 <code>RelativeToBoundingBox</code> 时，起点坐标和终点坐标就是(0,0)和(1,1)</li>
<li>值为 <code>Absolute</code> 时，起点坐标和终点坐标就是 (0,0)和(100,50)</li>
</ul>
</li>
<li><code>SpreadMethod</code><ul>
<li>用于选择渐变的扩展类型</li>
<li>可选值：<code>Pad</code>(默认)，<code>Reflect</code>，<code>Repeat</code></li>
<li>值为 <code>Pad</code> 时，渐变向量末端的颜色值填充剩余的空间。</li>
<li>值为 <code>Reflect</code> 时，按设置颜色的反方向重复渐变，直至充满空间。</li>
<li>值为 <code>Repeat</code> 时，按原始方向重复渐变，直至充满空间。</li>
</ul>
</li>
</ul>
<p>完整例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;Style.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Style&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">MinWidth</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">MinHeight</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Padding</span>=<span class="string">&quot;12&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Margin</span>=<span class="string">&quot;12&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;LeftMarginButtonBase&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;12,0,0,0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;35,10,35,10&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF109895&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Opacity</span>=<span class="string">&quot;0.65&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFF9F9E1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Key</span>=<span class="string">&quot;RedButton&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BasedOn</span>=<span class="string">&quot;&#123;StaticResource LeftMarginButtonBase&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Key</span>=<span class="string">&quot;YellowButton&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BasedOn</span>=<span class="string">&quot;&#123;StaticResource LeftMarginButtonBase&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">TargetType</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Yellow&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush1&quot;</span> <span class="attr">SpreadMethod</span>=<span class="string">&quot;Reflect&quot;</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;0.5,0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush2&quot;</span> <span class="attr">SpreadMethod</span>=<span class="string">&quot;Repeat&quot;</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;0.5,0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF23921A&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;0,0,0,12&quot;</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource RedButton&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Ok&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource YellowButton&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1,1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Yellow&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;12,0,0,0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1,0&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">LinearGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;12,0,0,0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush1&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;12,0,0,0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush2&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/wpf-style-4.png" alt="wpf-style-4"></p>
<h3 id="圆形梯度画刷（RadialGradientBrush）"><a href="#圆形梯度画刷（RadialGradientBrush）" class="headerlink" title="圆形梯度画刷（RadialGradientBrush）"></a>圆形梯度画刷（RadialGradientBrush）</h3><p>例子1</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush4&quot;</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0,0&quot;</span> <span class="attr">RadiusX</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">RadiusY</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Margin</span>=<span class="string">&quot;0,12,0,0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush4&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/RadialGradientBrush_1.png" alt="RadialGradientBrush"></p>
<p>例子2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush4&quot;</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.5,0&quot;</span> <span class="attr">RadiusX</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">RadiusY</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Margin</span>=<span class="string">&quot;0,12,0,0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush4&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/RadialGradientBrush_2.png" alt="RadialGradientBrush_2"></p>
<p>例子3</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush4&quot;</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.5,0.5&quot;</span> <span class="attr">RadiusX</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">RadiusY</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Margin</span>=<span class="string">&quot;0,12,0,0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush4&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/RadialGradientBrush_3.png" alt="RadialGradientBrush_3"></p>
<p>上面三个例子的唯一区别就是 <code>GradientOrigin</code> 属性的值不一样。</p>
<p>例子4</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;Brush4&quot;</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.5,0.5&quot;</span> <span class="attr">RadiusX</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">RadiusY</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0.75&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0.35&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Yellow&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadialGradientBrush.GradientStops</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Margin</span>=<span class="string">&quot;0,12,0,0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;StaticResource Brush4&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/RadialGradientBrush_4.png" alt="RadialGradientBrush_4"></p>
<h3 id="图像画刷（ImageBrush）"><a href="#图像画刷（ImageBrush）" class="headerlink" title="图像画刷（ImageBrush）"></a>图像画刷（ImageBrush）</h3><p>首先在项目根目录中新建一个 <code>Resources</code> 文件夹。</p>
<p>然后在 <code>Resources</code> 文件夹下放一些要用的图片。</p>
<p><img src="/img/post_img/ImageBrush_1.png" alt="ImageBrush"></p>
<p>第一个例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">StrokeThickness</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;/Resources/cmake.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/ImageBrush_2.png" alt="ImageBrush_2"></p>
<p>图片属性设置</p>
<p><img src="/img/post_img/ImageBrush_3.png" alt="ImageBrush_3"></p>
<h3 id="控件画刷（VisualBrush）"><a href="#控件画刷（VisualBrush）" class="headerlink" title="控件画刷（VisualBrush）"></a>控件画刷（VisualBrush）</h3><h3 id="自定义画刷（DrawingBrush）"><a href="#自定义画刷（DrawingBrush）" class="headerlink" title="自定义画刷（DrawingBrush）"></a>自定义画刷（DrawingBrush）</h3>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 配置nvic优先级组</title>
    <url>//article/at32/at32-nvic-priority-group/</url>
    <content><![CDATA[<p>在学习 <code>At32</code> 的过程中遇到了<code>nvic</code>优先级组，在此做个记录方便以后查阅。<code>at32</code>的固件库中 <code>NVIC</code> 相关的 <code>API</code> 在 <code>at32f413_misc.c</code> 文件中。</p>
<h2 id="nvic-priority-group-type"><a href="#nvic-priority-group-type" class="headerlink" title="nvic_priority_group_type"></a>nvic_priority_group_type</h2><p>nvic_priority_group_type 枚举类型，定义了5中分组类型，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief nvic interrupt priority group</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  NVIC_PRIORITY_GROUP_0                  = ((<span class="type">uint32_t</span>)<span class="number">0x7</span>), <span class="comment">/*!&lt; 0 bits for preemption priority, 4 bits for subpriority */</span></span><br><span class="line">  NVIC_PRIORITY_GROUP_1                  = ((<span class="type">uint32_t</span>)<span class="number">0x6</span>), <span class="comment">/*!&lt; 1 bits for preemption priority, 3 bits for subpriority */</span></span><br><span class="line">  NVIC_PRIORITY_GROUP_2                  = ((<span class="type">uint32_t</span>)<span class="number">0x5</span>), <span class="comment">/*!&lt; 2 bits for preemption priority, 2 bits for subpriority */</span></span><br><span class="line">  NVIC_PRIORITY_GROUP_3                  = ((<span class="type">uint32_t</span>)<span class="number">0x4</span>), <span class="comment">/*!&lt; 3 bits for preemption priority, 1 bits for subpriority */</span></span><br><span class="line">  NVIC_PRIORITY_GROUP_4                  = ((<span class="type">uint32_t</span>)<span class="number">0x3</span>)  <span class="comment">/*!&lt; 4 bits for preemption priority, 0 bits for subpriority */</span></span><br><span class="line">&#125; nvic_priority_group_type;</span><br></pre></td></tr></table></figure>

<h2 id="配置优先级分组"><a href="#配置优先级分组" class="headerlink" title="配置优先级分组"></a>配置优先级分组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置 NVIC 分组为 4 位抢占优先级，0位子优先级。</span></span><br><span class="line">nvic_priority_group_config(NVIC_PRIORITY_GROUP_4);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>NVIC</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 打印输出 SystemCoreClock 的值</title>
    <url>//article/at32/at32-system-color-clock/</url>
    <content><![CDATA[<p>这里简单演示下打印输出 SystemCoreClock 的值，我用的 MCU 为 at32f413，最大频率为 200MHz。</p>
<p>我的配置：</p>
<p><img src="/img/post_img/at32_system_clock.png" alt="at32_system_clock"></p>
<h2 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h2><p>时钟的配置可以用 <code>AT32</code> 官方提供的时钟配置工具（<code>AT32_New_Clock_Configuration.exe</code>）来生成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">system_clock_config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* reset crm */</span></span><br><span class="line">  crm_reset();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用外部 8MHz 晶振</span></span><br><span class="line">  crm_clock_source_enable(CRM_CLOCK_SOURCE_HEXT, TRUE);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* wait till hext is ready */</span></span><br><span class="line">  <span class="keyword">while</span>(crm_hext_stable_wait() == ERROR)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* config pll clock resource */</span></span><br><span class="line">  crm_pll_config(CRM_PLL_SOURCE_HEXT, CRM_PLL_MULT_25, CRM_PLL_OUTPUT_RANGE_GT72MHZ);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* enable pll */</span></span><br><span class="line">  crm_clock_source_enable(CRM_CLOCK_SOURCE_PLL, TRUE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* wait till pll is ready */</span></span><br><span class="line">  <span class="keyword">while</span>(crm_flag_get(CRM_PLL_STABLE_FLAG) != SET)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* config ahbclk */</span></span><br><span class="line">  crm_ahb_div_set(CRM_AHB_DIV_1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* config apb2clk, the maximum frequency of APB1/APB2 clock is 100 MHz  */</span></span><br><span class="line">  crm_apb2_div_set(CRM_APB2_DIV_2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* config apb1clk, the maximum frequency of APB1/APB2 clock is 100 MHz  */</span></span><br><span class="line">  crm_apb1_div_set(CRM_APB1_DIV_2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* enable auto step mode */</span></span><br><span class="line">  crm_auto_step_mode_enable(TRUE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* select pll as system clock source */</span></span><br><span class="line">  crm_sysclk_switch(CRM_SCLK_PLL);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* wait till pll is used as system clock source */</span></span><br><span class="line">  <span class="keyword">while</span>(crm_sysclk_switch_status_get() != CRM_SCLK_PLL)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* disable auto step mode */</span></span><br><span class="line">  crm_auto_step_mode_enable(FALSE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* update system_core_clock global variable */</span></span><br><span class="line">  system_core_clock_update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>system_core_clock_update();</code> 函数会更新变量 <code>system_core_clock</code> 的值。SystemCoreClock 的值就是 <code>system_core_clock</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SystemCoreClock                  system_core_clock</span></span><br></pre></td></tr></table></figure>

<h2 id="printf-输出"><a href="#printf-输出" class="headerlink" title="printf 输出"></a>printf 输出</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system_clock_config();</span><br><span class="line"></span><br><span class="line">    xtp_gpio_init();   <span class="comment">// 所有 io 初始化</span></span><br><span class="line">    xtp_usart_init();  <span class="comment">// 串口初始化</span></span><br><span class="line">    xtp_create_task(); <span class="comment">// 创建 FreeRTOS 任务</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SystemCoreClock: %d&quot;</span>, SystemCoreClock); <span class="comment">// 200000000(200MHz)</span></span><br><span class="line">    <span class="comment">/* 开启任务调度器 */</span></span><br><span class="line">    vTaskStartScheduler();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>SystemCoreClock</tag>
      </tags>
  </entry>
  <entry>
    <title>不同数据库中的 SQL 自增字段类型</title>
    <url>//article/database/sql-auto-increment/</url>
    <content><![CDATA[<p>有时我们会用到不同的数据库，每种数据库中的 自增字段 SQL 可能不同，在此记录一下不同数据库中的自增字段。</p>
<h2 id="MySQL-中的自增字段"><a href="#MySQL-中的自增字段" class="headerlink" title="MySQL 中的自增字段"></a>MySQL 中的自增字段</h2><p>MySQL 中的自增字段可以用 <code>AUTO_INCREMENT</code> 关键字，例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> student(</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (student_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="PostgreSQL-中的自增字段"><a href="#PostgreSQL-中的自增字段" class="headerlink" title="PostgreSQL 中的自增字段"></a>PostgreSQL 中的自增字段</h2><p>在 <code>PostgreSQL</code> 中可以使用 <code>SERIAL</code> 或 <code>BIGSERIAL</code> 类型来定义自增字段。例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="SQLite-中的自增字段"><a href="#SQLite-中的自增字段" class="headerlink" title="SQLite 中的自增字段"></a>SQLite 中的自增字段</h2><p><code>SQLite</code> 中可以用 <code>AUTOINCREMENT</code> 来创建自增字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    id <span class="type">INT</span> AUTOINCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>sqlite</tag>
        <tag>mysql</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlite3 基础语法</title>
    <url>//article/database/sqlite3-base/</url>
    <content><![CDATA[<p>再此记录以下我学习 <code>sqlite3</code> 的一些笔记，主要是心记不好容易忘记。</p>
<h2 id="1-连接或创建数据库"><a href="#1-连接或创建数据库" class="headerlink" title="1. 连接或创建数据库"></a>1. 连接或创建数据库</h2><p>创建和连接数据库用的是一个命令 <code>sqlite3 name.db</code> 如果 <code>name.db</code> 数据库已存在则连接到该数据库，否则创建该数据库。</p>
<p>也可以直接输入 <code>sqlite3</code> 并回车：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zsf@xiaotupo:~/learn/learn-projects/deno-demo$ sqlite3 </span><br><span class="line">SQLite version 3.40.1 2022-12-28 14:03:47</span><br><span class="line">Enter <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">Connected to a transient in-memory database.</span><br><span class="line">Use <span class="string">&quot;.open FILENAME&quot;</span> to reopen on a persistent database.</span><br><span class="line">sqlite&gt; .open test.db</span><br><span class="line">sqlite&gt; SELECT * FROM linux;</span><br><span class="line">Debian|11</span><br><span class="line">Ubuntu|21</span><br><span class="line">sqlite&gt; </span><br></pre></td></tr></table></figure>

<p>因为 <code>deno-demo</code> 目录下以及存在了 <code>test.db</code> 数据库文件，并且里面有一个数据库 <code>linux</code>。所以我们可以执行查询语句：<code>sqlite&gt; SELECT * FROM linux;</code>。</p>
<h2 id="2-怎么执行退出-sqlite3-命令"><a href="#2-怎么执行退出-sqlite3-命令" class="headerlink" title="2. 怎么执行退出 sqlite3 命令"></a>2. 怎么执行退出 sqlite3 命令</h2><p>我们进入 <code>sqlite3</code> 命令后会看到“Enter “.help” for usage hints.”这样的一些信息，可以看到 <code>.help</code> ，这就是 <code>sqlite3</code> 中的命令格式。</p>
<ol>
<li>.help 获取帮助信息，很有用。</li>
<li>.exit 或 .quit 退出 <code>sqlite3</code></li>
</ol>
<h2 id="3-查看表结构"><a href="#3-查看表结构" class="headerlink" title="3. 查看表结构"></a>3. 查看表结构</h2><p>在此直接给出例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .schema linux</span><br><span class="line">CREATE TABLE linux(name string,version int);</span><br></pre></td></tr></table></figure>

<h2 id="4-查看当前打开的数据库文件的位置"><a href="#4-查看当前打开的数据库文件的位置" class="headerlink" title="4. 查看当前打开的数据库文件的位置"></a>4. 查看当前打开的数据库文件的位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .database</span><br><span class="line">main: /home/zsf/learn/learn-projects/deno-demo/test.db r/w</span><br></pre></td></tr></table></figure>

<h2 id="5-创建一个表"><a href="#5-创建一个表" class="headerlink" title="5. 创建一个表"></a>5. 创建一个表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; CREATE TABLE phone(brand string, model string, price DECIMAL(10,2));</span><br></pre></td></tr></table></figure>

<h2 id="6-插入数据"><a href="#6-插入数据" class="headerlink" title="6. 插入数据"></a>6. 插入数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; INSERT INTO phone(brand, model, price) VALUES (&quot;小米&quot;, &quot;小米13 Max&quot;, 3200.01);</span><br><span class="line">sqlite&gt; SELECT * FROM phone ;</span><br><span class="line">小米|小米13 Max|3200.01</span><br></pre></td></tr></table></figure>

<p>如果要为表中的每个字段都插入数据，并且安装表中字段的顺序插入，则可以省略列名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; INSERT INTO phone VALUES (&quot;小米&quot;, &quot;小米13 Max&quot;, 3200.01);</span><br></pre></td></tr></table></figure>

<h2 id="7-查询表中的数据"><a href="#7-查询表中的数据" class="headerlink" title="7. 查询表中的数据"></a>7. 查询表中的数据</h2><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1. 基础语法"></a>1. 基础语法</h3><p>查找表 <code>linux</code> 中的所有数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM linux;</span><br><span class="line">Debian|11</span><br><span class="line">Ubuntu|21</span><br></pre></td></tr></table></figure>

<h3 id="2-查询指定字段"><a href="#2-查询指定字段" class="headerlink" title="2. 查询指定字段"></a>2. 查询指定字段</h3><p>之查询制定字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT model, price FROM phone ;</span><br><span class="line">小米13 Max|3200.01</span><br><span class="line">华为16Pro|4889.32</span><br></pre></td></tr></table></figure>

<h3 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3. 条件查询"></a>3. 条件查询</h3><h2 id="SQLite-支持的字段类型"><a href="#SQLite-支持的字段类型" class="headerlink" title="SQLite 支持的字段类型"></a>SQLite 支持的字段类型</h2><ul>
<li><code>NULL</code> 值为 <code>NULL</code></li>
<li><code>INTEGER</code> 值为带符号的整型</li>
<li><code>REAL</code> 浮点型，8字节长度</li>
<li><code>TEXT</code> 字符串</li>
<li><code>BLOB</code> 二进制数据</li>
</ul>
<p>一些 <code>sqlite3</code> 支持的其他类型：</p>
<ul>
<li><code>smallint</code> 16位整数</li>
<li><code>interger</code> 32位整数</li>
<li><code>decimal(p,s)</code> <code>p</code> 指全部长度，<code>s</code> 小数点后的位数</li>
<li><code>float</code> 32位</li>
<li><code>double</code> 64位</li>
<li><code>char(n)</code> 固定长度的字符串</li>
<li><code>varchar(n)</code> 长度可变的字符串 </li>
<li><code>date</code> 日期类型</li>
<li><code>time</code> 时间类型</li>
<li><code>timestamp</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title>0.96寸OLED显示屏</title>
    <url>//article/embedded/ssd1306-096-oled/</url>
    <content><![CDATA[<p>0.96 寸黄蓝 OLED 显示屏像素大小：</p>
<ul>
<li>顶部黄色区域为 16x128像素</li>
<li>底部蓝色区域为 48x128像素</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>OLED</tag>
        <tag>SSD1306</tag>
        <tag>0.96</tag>
      </tags>
  </entry>
  <entry>
    <title>SSD1306 初始化遇到屏幕花屏的调试笔记</title>
    <url>//article/embedded/ssd1306-init-note/</url>
    <content><![CDATA[<p>在调试 SSD1306 驱动 0.96寸 OLED 时，遇到了在初始化完成后全屏点亮时花屏，最后发现去掉这两行命令后回复正常：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置起始页地址，假设从第0页开始</span></span><br><span class="line">sendCommand(<span class="number">0x22</span>);<span class="comment">// 设置页地址指令</span></span><br><span class="line">sendCommand(<span class="number">0x00</span>);<span class="comment">// 设置起始页地址，这里设为第0页</span></span><br><span class="line"><span class="comment">// 注意：对于128x64的SSD1306，页地址范围是0到7（共8页）</span></span><br></pre></td></tr></table></figure>

<p>花屏图片：</p>
<p><img src="/img/post_img/ssd1306-init-01.jpg" alt="SSD1306 初始化遇到屏幕花屏的调试笔记"></p>
]]></content>
  </entry>
  <entry>
    <title>FreeRTOS 配置文件笔记</title>
    <url>//article/freertos/freertos-config/</url>
    <content><![CDATA[<p><code>FreeRTOSConfig.h</code> 是 <code>FreeRTOS</code> 中的配置文件，通过配置该文件可以裁剪使用哪些 <code>FreeRTOS</code> 功能。</p>
<p>网站的 <code>FreeRTOSConfig.h</code> 配置文件很大有很多配置选项，但是有很多选项是有默认值的，我们只需配置我们使用的选项即可。</p>
<p>下面是一份 <code>FreeRTOSConfig.h</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file        : FreeRTOSConfig.h</span></span><br><span class="line"><span class="comment"> * @brief       : FreeRTOS 配置文件</span></span><br><span class="line"><span class="comment"> * @author      : 小土坡</span></span><br><span class="line"><span class="comment"> * @email       : xiaotupo@163.com</span></span><br><span class="line"><span class="comment"> * @version     : V1.0.1</span></span><br><span class="line"><span class="comment"> * @date        : 2024-6-9</span></span><br><span class="line"><span class="comment"> * @license     : 许可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @github      : https://github.com/xiaotupo-com</span></span><br><span class="line"><span class="comment"> * @site        : https://xiaotupo.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @note        :</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common_inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AT32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;at32f413.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> STM32F1XX</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_PREEMPTION 1 <span class="comment">/* 1: 使用抢占式调度器，1: 使用合作式调度器 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钩子函数配置：</span></span><br><span class="line"><span class="comment"> * 钩子函数的主要功能是用于函数的扩展，用户可以根据自己的需要往里面添加相关的测试函数。</span></span><br><span class="line"><span class="comment"> * 1：使能空闲任务钩子函数</span></span><br><span class="line"><span class="comment"> * 0：禁能空闲钩子函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_IDLE_HOOK 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置滴答定时器钩子函数；</span></span><br><span class="line"><span class="comment"> * 1: 使能滴答定时器中断里面执行的钩子函数</span></span><br><span class="line"><span class="comment"> * 0: 禁能滴答定时器里面执行的钩子函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_TICK_HOOK 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CPU 时钟频率设置：</span></span><br><span class="line"><span class="comment"> * AT32F413 最高 200MHz</span></span><br><span class="line"><span class="comment"> * STM32F1 最高 72MHz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configCPU_CLOCK_HZ ((unsigned long)SystemCoreClock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此参数用于定义系统时钟节拍数，单位Hz，一般取1000Hz即可。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configTICK_RATE_HZ ((TickType_t)1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此参数用于定义可供用户使用的最大优先级数，如果这个定义的是5，那么用户可以使用的优先级号是0,1,2,3,4，不包含5，对于这一点，初学者要特别的注意。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configMAX_PRIORITIES (8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此参数用于定义空闲任务的栈空间大小，单位字，即4字节。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configMINIMAL_STACK_SIZE ((unsigned short)128)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义堆大小，FreeRTOS内核，用户动态内存申请，任务栈，任务创建，信号量创建，消息队列创建等都需要用这个空间。单位（字）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configTOTAL_HEAP_SIZE ((size_t)(5 * 1024))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务名字的最大长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configMAX_TASK_NAME_LEN (16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使能此配置将添加额外的结构体成员和函数，以此来协助可视化和**跟踪**</span></span><br><span class="line"><span class="comment"> * 在使用IAR中的FreeRTOS插件时要使能这个配置，否则无法显示任务栈的使用情况。</span></span><br><span class="line"><span class="comment"> * 1: 使能</span></span><br><span class="line"><span class="comment"> * 0: 禁能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_TRACE_FACTLITY 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统时钟节拍计数使用TickType_t数据类型定义的。</span></span><br><span class="line"><span class="comment"> * 如果用户使能了宏定义 configUSE_16_BIT_TICKS，那么TickType_t定义的就是16位无符号数，如果没有使能，那么</span></span><br><span class="line"><span class="comment"> * TickType_t定义的就是32位无符号数。对于32位架构的处理器，一定要禁止此宏定义，即设置此宏定义数值为0即可。而16位无符号数类型主要用于8位和16位架构的处理器。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_16_BIT_TICKS 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时器配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> configUSE_TIMERS 0                                          <span class="comment">/* 1: 启用软件定时器 0: 禁用 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configTIMER_TASK_PRIORITY (configMAX_PRIORITIES - 1)        <span class="comment">/* 软件定时器优先级 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configTIMER_QUEUE_LENGTH 5                                  <span class="comment">/* 软件定时器队列长度 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configTIMER_TASK_STACK_DEPTH (configMINIMAL_STACK_SIZE * 2) <span class="comment">/* 软件定时器任务堆栈大小 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION 1 <span class="comment">// 支持动态分配，默认为 1</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此参数用于使能与空闲任务同优先级的任务，只有满足以下两个条件时，此参数才有效果：</span></span><br><span class="line"><span class="comment"> * 1. 使能抢占式调度器。</span></span><br><span class="line"><span class="comment"> * 2. 有创建与空闲任务同优先级的任务。</span></span><br><span class="line"><span class="comment"> * 配置为1，就可以使能此特性了，实际应用中不建议用户使用此功能，将其配置为0即可。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configIDLE_SHOULD_YIELD 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the following definitions to 1 to include the API function, or zero</span></span><br><span class="line"><span class="comment">to exclude the API function. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskPrioritySet 1      <span class="comment">/* 使能 vTaskPrioritySet() 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_uxTaskPriorityGet 1     <span class="comment">/* 使能 uxTaskPriorityGet() 函数*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskDelete 1           <span class="comment">/* 使能 vTaskDelete() 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskCleanUpResources 0 <span class="comment">/* 禁能 vTaskCleanUpResources() 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskSuspend 1          <span class="comment">/* 使能 vTaskSuspend() */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskDelayUntil 1       <span class="comment">/* 使能 vTaskDelayUntil() 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_vTaskDelay 1            <span class="comment">/* 使能 vTaskDelay() 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCLUDE_xTaskGetHandle  1       <span class="comment">/* 使能 xTaskGetHandle() 函数 */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __NVIC_PRIO_BITS <span class="comment">// __NVIC_PRIO_BITS 的定义在at32f413.h 中</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> configPRIO_BITS __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// 芯片实现的优先级位数 （AT32 为4位）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configPRIO_BITS 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 PendSV 和 SysTick 中断的优先级为最低优先级</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY 0xF <span class="comment">// 配置最低优先级</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255</span></span><br><span class="line"><span class="comment">(lowest) to 0 (1?) (highest). */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configKERNEL_INTERRUPT_PRIORITY (configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 2 <span class="comment">// 可以在最高为 5 的优先级的中断函数中调用 FreeRTOS 的 API 函数。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY (configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置用于优化优先级列表中要执行的最高优先级任务的算法。对CM内核的移植文件，</span></span><br><span class="line"><span class="comment"> * 默认已经在文件portmacro.h文件中使能。</span></span><br><span class="line"><span class="comment"> * 0: 通用方式，任务优先级数量不限制，纯C编写，比专用方式效率低</span></span><br><span class="line"><span class="comment"> * 1：专用方式，比通用方式高效，有最大优先级数限制，通常限制为 32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTIOIN 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> configUSE_TICKLESS_IDLE 0 <span class="comment">/* 1: 使能 tickless 低功耗模式，0: 禁能tickless 低功耗模式 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xPortSysTickHandler,vPortSVCHandler,xPortPendSVHandler 是 FreeRTOS 源码中定义的</span></span><br><span class="line"><span class="comment"> * SysTick_Handler，SVC_Handler，PendSV_Handler 是启动文件 startup_stm32f103xe.s 要用的</span></span><br><span class="line"><span class="comment"> * 我们在 STM32CubeMX 的配置中取消了 SysTick_Handler，SVC_Handler，PendSV_Handler 者三个函数代码的生成</span></span><br><span class="line"><span class="comment"> * 这里把重命名了一下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xPortSysTickHandler SysTick_Handler</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vPortSVCHandler SVC_Handler</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __FREERTOS_CONFIG_H end! */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
        <tag>FreeRTOSConfig</tag>
      </tags>
  </entry>
  <entry>
    <title>wxWidgets 中文乱码解决办法</title>
    <url>//article/issus/wxWidgets-Chinese-messy-code/</url>
    <content><![CDATA[<p>在 Clion 中 wxWidgets 中文乱码的解决办法，解决办法是配置编译器为 UTF-8 选项：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Visual Studio 配置 UTF-8，解决中文乱码问题  </span></span><br><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;C_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)  </span><br><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/post_img/wxwidgets_001.png" alt="wxWidgets 中文乱码"></p>
<ul>
<li><a href="https://stackoverflow.com/questions/47690822/possible-to-force-cmake-msvc-to-use-utf-8-encoding-for-source-files-without-a-bo">Possible to force CMake&#x2F;MSVC to use UTF-8 encoding for source files without a BOM? C4819</a></li>
</ul>
]]></content>
      <categories>
        <category>Issues</category>
      </categories>
      <tags>
        <tag>CMake</tag>
        <tag>wxWidgets</tag>
        <tag>中文乱码</tag>
        <tag>Clion</tag>
      </tags>
  </entry>
  <entry>
    <title>用 NVM 管理 npm 和 node 的版本</title>
    <url>//article/front-end/nvm-node-manage/</url>
    <content><![CDATA[<p>NVM 是用来管理 node 和 npm 版本的工具，官方仓库：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p>我的系统是 Windows，需要安装 nvm-windows，官方仓库： <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p>
<h2 id="nvm-命令"><a href="#nvm-命令" class="headerlink" title="nvm 命令"></a>nvm 命令</h2><ul>
<li><code>nvm list</code> 查看安装的 <code>node</code> 版本</li>
<li><code>windows</code> 查看可用的版本 <code>nvm ls available</code></li>
<li><code>nvm use 版本号</code> 切换的指定版本</li>
<li><code>nvm use node</code> 切换到最新版本</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>NVM</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux find 命令笔记</title>
    <url>//article/linux/find-command/</url>
    <content><![CDATA[<h2 id="一-基本查找"><a href="#一-基本查找" class="headerlink" title="一. 基本查找"></a>一. 基本查找</h2><h3 id="查找指定目录中的所有文件和目录"><a href="#查找指定目录中的所有文件和目录" class="headerlink" title="查找指定目录中的所有文件和目录"></a>查找指定<code>目录</code>中的所有<code>文件</code>和<code>目录</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /home/user</span><br><span class="line">sudo find /usr/share</span><br></pre></td></tr></table></figure>

<h3 id="查找指定目录中的指定文件"><a href="#查找指定目录中的指定文件" class="headerlink" title="查找指定目录中的指定文件"></a>查找指定目录中的指定文件</h3><p>查找 <code>/etc</code> 目录下的 <code>hosts</code> 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /etc -name <span class="string">&quot;hosts&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─zsf@xiaotupo ~/hexo_blog  ‹main*› </span><br><span class="line">╰─➤  sudo find /etc -name <span class="string">&quot;hosts&quot;</span>                                                                                                             1 ↵</span><br><span class="line">[sudo] zsf 的密码：</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/avahi/hosts</span><br></pre></td></tr></table></figure>

<h2 id="按文件类型查找"><a href="#按文件类型查找" class="headerlink" title="按文件类型查找"></a>按文件类型查找</h2><ol>
<li>查找指定目录中的所有目录：<code>find /var -type d</code></li>
<li>查找指定目录中的所有普通文件：<code>find /tmp -type f</code></li>
</ol>
<h2 id="按文件大小查找"><a href="#按文件大小查找" class="headerlink" title="按文件大小查找"></a>按文件大小查找</h2><ul>
<li>查找指定目录下大于某个大小的文件</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /path/to/directory -size +n[ckMG]</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><code>n</code> 为数字</li>
<li><code>c</code> 表示字节</li>
<li><code>k</code> 表示千字节</li>
<li><code>M</code> 表示兆字节</li>
<li><code>G</code> 表示吉字节</li>
</ul>
<p>例子：</p>
<p>在 <code>/home/user</code> 目录中查找大于 10Mb 的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /home/user -size +10M</span><br></pre></td></tr></table></figure>

<ul>
<li>查找指定目录下小于某个大小的文件</li>
</ul>
<p>和查找指定目录中大于某个大小的文件方法类似，只不过是把 <code>-size</code> 后面的 <code>+</code> 号换成了 <code>-</code> 号而已。</p>
<h2 id="按文件修改时间查找"><a href="#按文件修改时间查找" class="headerlink" title="按文件修改时间查找"></a>按文件修改时间查找</h2><ul>
<li>查找指定目录中过去 <code>n</code> 天内修改过的文件</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /path/to/directory -mtime -n</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p>查找过去7天内修改过的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /opt -mtime -7</span><br></pre></td></tr></table></figure>

<ul>
<li>查找指定目录下过去 <code>n</code> 天前修改过的文件</li>
</ul>
<p>和过去 <code>n</code> 天内修改过的文件的查找方法类似，只是把 <code>-</code> 号换成了 <code>+</code>。</p>
<h2 id="逻辑组合查找"><a href="#逻辑组合查找" class="headerlink" title="逻辑组合查找"></a>逻辑组合查找</h2><ul>
<li>使用 <code>-and</code> 或 <code>-a</code> 连接多个条件进行与操作。例如：查找 <code>/data</code> 目录下即大于 10MB 又在过去7天内修改过的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /data -size +10M -a -mtime -7</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>-or</code> 或 <code>-o</code> 连接多个条件进行或操作。例如：查找 <code>/backup</code> 目录下文件名包含 <code>backup</code> 或者扩展名为 <code>.bak</code> 的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /backup \( -name <span class="string">&quot;*backup*&quot;</span> -o -name <span class="string">&quot;*.bak&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h2><p>在茶找到文件后，可以使用 <code>-exec</code> 选项对查找到的文件执行相应的操作。例如：删除 <code>/tmp</code> 目录下所有扩展名为 <code>.log</code> 的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /tmp -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>这里的 <code>&#123;&#125;</code> 表示查找到的文件名，<code>\;</code> 是 <code>-exec</code> 命令的结束标志。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>find</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 内核链表学习笔记</title>
    <url>//article/linux/list_head/</url>
    <content><![CDATA[<p>在此记录下Linux 下的链表笔记，首先看一下链表的结构体定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>list_head</code> 结构体里面只有两个指向自己的指针，接下来看看怎么创建一个头指针。</p>
<h2 id="创建头节点"><a href="#创建头节点" class="headerlink" title="创建头节点"></a>创建头节点</h2><p><code>Linux</code> 内核提供了 <code>LIST_HEAD()</code> 宏，宏可以方便的创建一个 <code>next</code> 和 <code>prev</code> 都指向自己的头节点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD_INIT(name) &#123; &amp;(name), &amp;(name) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD(name) \</span></span><br><span class="line"><span class="meta">    struct list_head name = LIST_HEAD_INIT(name)</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LIST_HEAD(my_list);</span><br></pre></td></tr></table></figure>

<p>上面宏展开后的样子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">my_list</span> =</span> &#123; &amp;(my_list), &amp;(my_list) &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="将-list-head-嵌入到自己的结构体中"><a href="#将-list-head-嵌入到自己的结构体中" class="headerlink" title="将 list_head 嵌入到自己的结构体中"></a>将 list_head 嵌入到自己的结构体中</h2><p>我们在此创建一个 <code>student</code> 学生结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_NAME_LEN  25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> STUDENT_AGE_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> &#123;</span> MALE, FEMALE &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span> <span class="comment">// 嵌入的 list_head</span></span><br><span class="line">    u64 id;</span><br><span class="line">    <span class="type">char</span> name[STUDENT_NAME_LEN];</span><br><span class="line">    STUDENT_AGE_TYPE age;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">sex</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<div class="note warning no-icon flat"><p><code>C</code> 语言中结构体的第一个成员的地址就是结构体的首地址，和 <code>C</code> 中的数组类似。</p>
</div>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>草图：</p>
<p><img src="/img/post_img/linux-list-head.png" alt="Linux 内核链表草图"></p>
<p>这里我们写了两个函数 <code>list_add()</code> 和 <code>list_add_tail()</code>，分别是向头部插入和向尾部插入。</p>
<p>其实也不复杂就是处理指针的指向而已，看不懂的照着草图慢慢研究。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="keyword">struct</span> list_head*new, <span class="keyword">struct</span> list_head* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (list_empty(head)) &#123;</span><br><span class="line">        head-&gt;next = new;</span><br><span class="line">        head-&gt;prev = new;</span><br><span class="line">        new-&gt;next = head;</span><br><span class="line">        new-&gt;prev = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        new-&gt;prev = head;</span><br><span class="line">        new-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = new;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add_tail</span><span class="params">(<span class="keyword">struct</span> list_head* new, <span class="keyword">struct</span> list_head *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (list_empty(head)) &#123;</span><br><span class="line">        head-&gt;next = new;</span><br><span class="line">        head-&gt;prev = new;</span><br><span class="line">        new-&gt;next = head;</span><br><span class="line">        new-&gt;prev = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head-&gt;prev-&gt;next = new;</span><br><span class="line">        new-&gt;next = head;</span><br><span class="line">        new-&gt;prev = head-&gt;prev;</span><br><span class="line">        head-&gt;prev = new;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="将自定义数据插入链表中"><a href="#将自定义数据插入链表中" class="headerlink" title="将自定义数据插入链表中"></a>将自定义数据插入链表中</h2><p>这里定义了另一个函数 <code>student_add()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">student_add</span><span class="params">(u64 id, <span class="type">char</span> *name, STUDENT_AGE_TYPE age, <span class="keyword">enum</span> Sex sex,</span></span><br><span class="line"><span class="params">                 <span class="keyword">struct</span> list_head *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span> =</span> (<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line">    stu-&gt;id = id;</span><br><span class="line">    <span class="built_in">snprintf</span>(stu-&gt;name, <span class="keyword">sizeof</span>(stu-&gt;name), <span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    stu-&gt;age = age;</span><br><span class="line">    stu-&gt;sex = sex;</span><br><span class="line">    list_add_tail(&amp;stu-&gt;<span class="built_in">list</span>, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过替换上面最后一行的 <code>list_add_tail(&amp;stu-&gt;list, head);</code> 为 <code>list_add(&amp;stu-&gt;list, head);</code> 即可切换插入的位置。</p>
<h2 id="遍历打印链表"><a href="#遍历打印链表" class="headerlink" title="遍历打印链表"></a>遍历打印链表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief 遍历打印 student 链表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param head </span></span><br><span class="line"><span class="comment"> ********************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">student_print</span><span class="params">(<span class="keyword">struct</span> list_head *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">pos</span>;</span></span><br><span class="line">    list_for_each(pos, head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;id: %d, name: %s, age: %d, Sex: %s\n&quot;</span>,</span><br><span class="line">               ((<span class="keyword">struct</span> student *)pos)-&gt;id, ((<span class="keyword">struct</span> student *)pos)-&gt;name,</span><br><span class="line">               ((<span class="keyword">struct</span> student *)pos)-&gt;age, sex_get_str(((<span class="keyword">struct</span> student *)pos)-&gt;sex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历打印用到了一个新的宏 <code>list_for_each(pos, head)</code>, 该宏展开后的样子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (pos = (head)-&gt;next; !list_is_head(pos, (head)); pos = pos-&gt;next)</span><br></pre></td></tr></table></figure>

<p>该宏的定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> list_for_each(pos, head) \</span></span><br><span class="line"><span class="meta">    for (pos = (head)-&gt;next; !list_is_head(pos, (head)); pos = pos-&gt;next)</span></span><br></pre></td></tr></table></figure>

<p>以上是最近学习 <code>Linux</code> 内核链表的一些笔记。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>TM3608 可调升压双电源开源项目分享</title>
    <url>//projects/TM3608-double-power/</url>
    <content><![CDATA[<p>最近做了一个双电源升压模块，可以把一个低的电压升压为正负电压。芯片用的是 <code>MT3608</code>，特此分享出来给大家。</p>
<p>供电输入可以选择 USB 也可以选择 6P的排针，通过调节2个电位器可以调整正负输出电压的高低。</p>
<h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p><img src="/img/post_img/MT3608_01.png" alt="MT3608_01"></p>
<h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><p><img src="/img/post_img/MT3608_02.png" alt="MT3608_02"></p>
<h2 id="力创开源硬件平台"><a href="#力创开源硬件平台" class="headerlink" title="力创开源硬件平台"></a>力创开源硬件平台</h2><p><a href="https://oshwhub.com/zsf90/mt3608_power_double" title="MT3608_Power_double">https://oshwhub.com/zsf90/mt3608_power_double</a></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>TM3608</tag>
        <tag>双电源</tag>
        <tag>开源项目</tag>
        <tag>升压电源</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 中的宏分类</title>
    <url>//article/rust/rust-macro-categories/</url>
    <content><![CDATA[<p>Rust中的宏可以按照不同的标准进行分类，以下是一些常见的分类方式及具体介绍：</p>
<h3 id="按功能用途分类"><a href="#按功能用途分类" class="headerlink" title="按功能用途分类"></a>按功能用途分类</h3><ul>
<li><strong>声明宏</strong>：用于定义新的语法结构或对已有语法进行扩展，通过<code>macro_rules!</code>关键字定义。例如，<code>vec!</code>宏用于方便地创建<code>Vec</code>类型的数组，<code>println!</code>宏用于格式化输出到控制台。</li>
<li><strong>过程宏</strong>：在编译时对代码进行操作和转换，比声明宏更强大，可以访问更多的编译器内部信息。包括以下三种类型：<ul>
<li><strong>自定义派生宏</strong>：允许为结构体和枚举自动实现特定的 trait。比如，为一个结构体派生<code>Debug</code> trait时，使用<code>#[derive(Debug)]</code>，编译器会在编译阶段自动为该结构体生成<code>Debug</code> trait的实现代码。</li>
<li><strong>属性宏</strong>：可以为代码添加自定义属性，用于修改代码的行为或为代码生成额外的代码。例如，<code>#[test]</code>属性宏用于标记一个函数为测试函数，测试框架会在运行测试时自动执行被标记的函数。</li>
<li><strong>函数宏</strong>：类似于函数调用，但可以在编译时对传入的参数进行处理和转换，然后生成新的代码。例如<code>format_args!</code>宏，它接受格式化字符串和参数，在编译时将其转换为合适的代码来处理格式化输出。</li>
</ul>
</li>
</ul>
<h3 id="按定义位置分类"><a href="#按定义位置分类" class="headerlink" title="按定义位置分类"></a>按定义位置分类</h3><ul>
<li><strong>内置宏</strong>：Rust语言自带的宏，如<code>vec!</code>、<code>println!</code>、<code>panic!</code>等，无需额外引入即可使用，提供了一些基本的功能，方便开发者进行日常的编程工作。</li>
<li><strong>外部宏</strong>：由外部 crate提供的宏，需要在<code>Cargo.toml</code>文件中添加相应的依赖后才能使用。例如，<code>serde</code>库中的<code>#[derive(Serialize, Deserialize)]</code>宏，用于方便地实现结构体的序列化和反序列化。</li>
<li><strong>用户自定义宏</strong>：由开发者自己定义的宏，用于满足特定的编程需求。可以根据实际情况定义声明宏或过程宏，以提高代码的复用性和可读性。</li>
</ul>
<h3 id="按调用方式分类"><a href="#按调用方式分类" class="headerlink" title="按调用方式分类"></a>按调用方式分类</h3><ul>
<li><strong>零参数宏</strong>：不需要传入任何参数的宏，如<code>panic!</code>宏，通常用于在程序出现错误时立即终止程序并打印错误信息。</li>
<li><strong>固定参数宏</strong>：需要传入固定数量参数的宏，如<code>format!</code>宏，它需要传入一个格式化字符串和对应的参数，用于生成格式化后的字符串。</li>
<li><strong>可变参数宏</strong>：可以传入可变数量参数的宏，如<code>println!</code>宏，它可以根据需要传入不同数量的参数进行格式化输出。</li>
</ul>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>宏</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Tauri 从前端访问后端 Rust</title>
    <url>//article/tauri/Calling-Rust-from-the-Frontend/</url>
    <content><![CDATA[<p>Tauri 提供了从前端访问后端 rust 函数的功能，这篇文章就来了解下如何使用该功能。</p>
<p>首先看下 rust 后端函数如何定义，以下是 tauri 初始项目中的代码片段：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/</span></span><br><span class="line"><span class="meta">#[tauri::command]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">greet</span>(name: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">&quot;Hello, &#123;&#125;! You&#x27;ve been greeted from Rust!&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg_attr(mobile, tauri::mobile_entry_point)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">    tauri::Builder::<span class="title function_ invoke__">default</span>()</span><br><span class="line">        .<span class="title function_ invoke__">plugin</span>(tauri_plugin_opener::<span class="title function_ invoke__">init</span>())</span><br><span class="line">        .<span class="title function_ invoke__">invoke_handler</span>(tauri::generate_handler![greet])</span><br><span class="line">        .<span class="title function_ invoke__">run</span>(tauri::generate_context!())</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;error while running tauri application&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码中的 <code>greet()</code> 就是给前端调用的函数，要让一个函数可以被前端调用需要用到 <code>command</code> 宏。</p>
<h2 id="前端调用"><a href="#前端调用" class="headerlink" title="前端调用"></a>前端调用</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; invoke &#125; <span class="keyword">from</span> <span class="string">&quot;@tauri-apps/api/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greetMsg = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/</span></span><br><span class="line">  greetMsg.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">invoke</span>(<span class="string">&quot;greet&quot;</span>, &#123; <span class="attr">name</span>: name.<span class="property">value</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;main class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;form class=&quot;row&quot; @submit.prevent=&quot;greet&quot;&gt;</span><br><span class="line">      &lt;input id=&quot;greet-input&quot; v-model=&quot;name&quot; placeholder=&quot;Enter a name...&quot; /&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; greetMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tauri</category>
      </categories>
      <tags>
        <tag>Rust</tag>
        <tag>前端</tag>
        <tag>Tauri</tag>
      </tags>
  </entry>
  <entry>
    <title>Tauri 在 Linux 下运行出错解决办法</title>
    <url>//article/tauri/tauri-linux-error-1/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">╭─zsf@xiaotupo ~/learn/learn-projects/tauri-learn/learn-01  </span><br><span class="line">╰─➤  pnpm tauri dev                                                                                                                       101 ↵</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">learn-01@0.1.0 tauri /home/zsf/learn/learn-projects/tauri-learn/learn-01</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tauri <span class="string">&quot;dev&quot;</span></span></span><br><span class="line"></span><br><span class="line">    Running BeforeDevCommand (`pnpm dev`)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">learn-01@0.1.0 dev /home/zsf/learn/learn-projects/tauri-learn/learn-01</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vite</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  VITE v5.4.11  ready in 259 ms</span><br><span class="line"></span><br><span class="line">  ➜  Local:   http://localhost:1420/</span><br><span class="line">    Info Watching /home/zsf/learn/learn-projects/tauri-learn/learn-01/src-tauri for changes...</span><br><span class="line">   Compiling gio v0.18.4</span><br><span class="line">   Compiling cairo-rs v0.18.5</span><br><span class="line">   Compiling atk v0.18.2</span><br><span class="line">   Compiling soup3-sys v0.5.0</span><br><span class="line">   Compiling tokio v1.42.0</span><br><span class="line">   Compiling javascriptcore-rs-sys v1.1.1</span><br><span class="line">   Compiling url v2.5.4</span><br><span class="line">   Compiling dirs v5.0.1</span><br><span class="line">   Compiling string_cache v0.8.7</span><br><span class="line">The following warnings were emitted during compilation:</span><br><span class="line"></span><br><span class="line">warning: javascriptcore-rs-sys@1.1.1: </span><br><span class="line"></span><br><span class="line">error: failed to run custom build command for `javascriptcore-rs-sys v1.1.1`</span><br><span class="line"></span><br><span class="line">Caused by:</span><br><span class="line">  process didn&#x27;t exit successfully: `/home/zsf/learn/learn-projects/tauri-learn/learn-01/src-tauri/target/debug/build/javascriptcore-rs-sys-c24e7b65ddaad010/build-script-build` (exit status: 1)</span><br><span class="line">  --- stdout</span><br><span class="line">  cargo:rerun-if-env-changed=JAVASCRIPTCOREGTK_4.1_NO_PKG_CONFIG</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_x86_64-unknown-linux-gnu</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_x86_64_unknown_linux_gnu</span><br><span class="line">  cargo:rerun-if-env-changed=HOST_PKG_CONFIG</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_PATH_x86_64-unknown-linux-gnu</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_PATH_x86_64_unknown_linux_gnu</span><br><span class="line">  cargo:rerun-if-env-changed=HOST_PKG_CONFIG_PATH</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_PATH</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_x86_64-unknown-linux-gnu</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_x86_64_unknown_linux_gnu</span><br><span class="line">  cargo:rerun-if-env-changed=HOST_PKG_CONFIG_LIBDIR</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_x86_64-unknown-linux-gnu</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_x86_64_unknown_linux_gnu</span><br><span class="line">  cargo:rerun-if-env-changed=HOST_PKG_CONFIG_SYSROOT_DIR</span><br><span class="line">  cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR</span><br><span class="line">  cargo:warning=</span><br><span class="line">  pkg-config exited with status code 1</span><br><span class="line"><span class="meta prompt_">  &gt; </span><span class="language-bash">PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 pkg-config --libs --cflags javascriptcoregtk-4.1 javascriptcoregtk-4.1 &gt;= 2.38</span></span><br><span class="line"></span><br><span class="line">  The system library `javascriptcoregtk-4.1` required by crate `javascriptcore-rs-sys` was not found.</span><br><span class="line">  The file `javascriptcoregtk-4.1.pc` needs to be installed and the PKG_CONFIG_PATH environment variable must contain its parent directory.</span><br><span class="line">  The PKG_CONFIG_PATH environment variable is not set.</span><br><span class="line"></span><br><span class="line">  HINT: if you have installed the library, try setting PKG_CONFIG_PATH to the directory containing `javascriptcoregtk-4.1.pc`.</span><br><span class="line"></span><br><span class="line">warning: build failed, waiting for other jobs to finish...</span><br><span class="line"> ELIFECYCLE  Command failed.</span><br><span class="line"> ELIFECYCLE  Command failed with exit code 101.</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>安装 <code>libwebkit2gtk-4.1-dev</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libwebkit2gtk-4.1-dev</span><br></pre></td></tr></table></figure>

<p>官方给的针对 <code>debian</code> 的依赖库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install libwebkit2gtk-4.0-dev \</span><br><span class="line">  build-essential \</span><br><span class="line">  curl \</span><br><span class="line">  wget \</span><br><span class="line">  file \</span><br><span class="line">  libxdo-dev \</span><br><span class="line">  libssl-dev \</span><br><span class="line">  libgtk-3-dev \</span><br><span class="line">  libayatana-appindicator3-dev \</span><br><span class="line">  librsvg2-dev</span><br></pre></td></tr></table></figure>

<p>可以看到官方写的是 <code>libwebkit2gtk-4.0-dev</code>。</p>
]]></content>
      <categories>
        <category>Tauri</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Tauri</tag>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一下我最近学习 wxWidgets 配合 wxFormBuilder开发的简单过程</title>
    <url>//article/wxwidgets/wxwidgets-wxFormBuilder-project-demo/</url>
    <content><![CDATA[<p>在此分享一些我学习 <code>wxWidgets</code> 的笔记，这篇文章介绍的是我写的一个简单例子，用到了 <code>wxFormBuilder</code> 界面设计工具。</p>
<h2 id="UI-设计"><a href="#UI-设计" class="headerlink" title="UI 设计"></a>UI 设计</h2><p>首先用 <code>wxFormBuilder</code> 设计如下图的窗口：</p>
<p><img src="/img/post_img/wxwidgets-wxformbuild-001.png" alt="wxFormBuilder"></p>
<p>项目树：</p>
<p><img src="/img/post_img/wxwidgets-wxformbuilder-002.png" alt="wxwidgets-wxformbuilder-002.png"></p>
<h3 id="bSizer1-属性设置"><a href="#bSizer1-属性设置" class="headerlink" title="bSizer1 属性设置"></a>bSizer1 属性设置</h3><p><code>bSizer1</code> 我们只需把方向属性 <code>orient</code> 设置为 <code>wxVERTICAL</code> 即可，这样 <code>bSizer1</code> 就会垂直布局。</p>
<p><img src="/img/post_img/wxwidgets-wxformbuilder-003.png" alt="wxwidgets-wxformbuilder-003.png"></p>
<h3 id="设置两个-spacer-的属性"><a href="#设置两个-spacer-的属性" class="headerlink" title="设置两个 spacer 的属性"></a>设置两个 spacer 的属性</h3><p><code>UI</code> 中我用到了两个 <code>spacer</code> 控件，控件放入 <code>bSizer1</code> 中，并把一个放在最上面另一个放在最下面，这样就会上下两个方向向中间挤压 <code>bSizer2</code> 和 <code>bSizer2，也就实现了我们要的效果。</code></p>
<h3 id="设置-bSizer2-和-bSizer3"><a href="#设置-bSizer2-和-bSizer3" class="headerlink" title="设置 bSizer2 和 bSizer3"></a>设置 bSizer2 和 bSizer3</h3><p><code>bSizer2</code> 和 <code>bSizer3</code> 设置成水平方向，并且把 <code>proportion</code> 设置为 <code>0</code>，这样容器的大小就会紧紧包裹子元素。</p>
<p><code>proportion</code>属性的含义：</p>
<p>当<code>proportion</code>设为<code>0</code>时，表示该窗口部件的大小是固定的，不会随着父窗口的大小变化而变化。这类窗口部件会保留其最佳大小或指定大小，不会占据额外的空间。</p>
<p>当<code>proportion</code>设为正整数时（如1、2、3…），表示该窗口部件可以伸缩，且伸缩的比例相对于同一方向上其他具有正<code>proportion</code>值的窗口部件。例如，如果两个窗口部件的<code>proportion</code>分别是<code>1</code>和<code>2</code>，那么当父窗口变大时，后者会比前者增长得更快，两者之间的比例约为<code>1:2</code>。</p>
<p>如果多个窗口部件的<code>proportion</code>值相同，它们将均等地分享可用的额外空间。</p>
<h3 id="设置事件函数"><a href="#设置事件函数" class="headerlink" title="设置事件函数"></a>设置事件函数</h3><p>把 8 个按钮的 OnButtonClick 事件都设置为 OnBtnClicked，这样任意一个按钮点击了都会调用这个函数，然后在这个函数中判断是那个按钮按下的。</p>
<p><img src="/img/post_img/wxwidgets-wxformbuilder-004.png" alt="wxwidgets-wxformbuilder-004.png"></p>
<p>因为要用按钮的 ID 来判断是那个按钮按下的，所以这里我定义了一个自定义的 ID 枚举类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by freer on 2024/7/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> XTP_ID_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XTP_ID_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom ID</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">XTPId</span> : <span class="type">int</span> &#123;</span><br><span class="line">    BoxSizer = <span class="number">10000</span>,</span><br><span class="line">    Btn1,</span><br><span class="line">    Btn2,</span><br><span class="line">    Btn3,</span><br><span class="line">    Btn4,</span><br><span class="line">    Btn5,</span><br><span class="line">    Btn6,</span><br><span class="line">    Btn7,</span><br><span class="line">    Btn8</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//XTP_ID_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="wxFormBuilder-生成的代码"><a href="#wxFormBuilder-生成的代码" class="headerlink" title="wxFormBuilder 生成的代码"></a>wxFormBuilder 生成的代码</h3><p>头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by freer on 2024/7/3.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BOX_SIZER_DEMO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOX_SIZER_DEMO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/artprov.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/xrc/xmlres.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/intl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/button.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/bitmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/image.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/icon.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/gdicmn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/font.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/colour.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/settings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/sizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/frame.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/// Class BoxSizerDemoFrame</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BoxSizerDemoFrame</span> : <span class="keyword">public</span> wxFrame</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    wxButton* m_button1;</span><br><span class="line">    wxButton* m_button2;</span><br><span class="line">    wxButton* m_button3;</span><br><span class="line">    wxButton* m_button4;</span><br><span class="line">    wxButton* m_button5;</span><br><span class="line">    wxButton* m_button6;</span><br><span class="line">    wxButton* m_button7;</span><br><span class="line">    wxButton* m_button8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Virtual event handlers, override them in your derived class</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnBtnClicked</span><span class="params">( wxCommandEvent&amp; event )</span> </span>&#123; event.<span class="built_in">Skip</span>(); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BoxSizerDemoFrame</span>( wxWindow* parent, wxWindowID id = wxID_ANY, <span class="type">const</span> wxString&amp; title = wxEmptyString, <span class="type">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="type">const</span> wxSize&amp; size = <span class="built_in">wxSize</span>( <span class="number">618</span>,<span class="number">203</span> ), <span class="type">long</span> style = wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL );</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">BoxSizerDemoFrame</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//BOX_SIZER_DEMO_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>源文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by freer on 2024/7/3.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;box_sizer_demo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xtp_id.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">BoxSizerDemoFrame::<span class="built_in">BoxSizerDemoFrame</span>( wxWindow* parent, wxWindowID id, <span class="type">const</span> wxString&amp; title, <span class="type">const</span> wxPoint&amp; pos, <span class="type">const</span> wxSize&amp; size, <span class="type">long</span> style ) : <span class="built_in">wxFrame</span>( parent, id, title, pos, size, style )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">SetSizeHints</span>( <span class="built_in">wxSize</span>( <span class="number">500</span>,<span class="number">300</span> ), wxDefaultSize );</span><br><span class="line"></span><br><span class="line">    wxBoxSizer* bSizer1;</span><br><span class="line">    bSizer1 = <span class="keyword">new</span> <span class="built_in">wxBoxSizer</span>( wxVERTICAL );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bSizer1-&gt;<span class="built_in">Add</span>( <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, wxEXPAND, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    wxBoxSizer* bSizer2;</span><br><span class="line">    bSizer2 = <span class="keyword">new</span> <span class="built_in">wxBoxSizer</span>( wxHORIZONTAL );</span><br><span class="line"></span><br><span class="line">    m_button1 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button1&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer2-&gt;<span class="built_in">Add</span>( m_button1, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button2 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button2&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer2-&gt;<span class="built_in">Add</span>( m_button2, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button3 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button3&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer2-&gt;<span class="built_in">Add</span>( m_button3, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button4 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button4&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer2-&gt;<span class="built_in">Add</span>( m_button4, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bSizer1-&gt;<span class="built_in">Add</span>( bSizer2, <span class="number">0</span>, wxALIGN_CENTER, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    wxBoxSizer* bSizer3;</span><br><span class="line">    bSizer3 = <span class="keyword">new</span> <span class="built_in">wxBoxSizer</span>( wxHORIZONTAL );</span><br><span class="line"></span><br><span class="line">    m_button5 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button5&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer3-&gt;<span class="built_in">Add</span>( m_button5, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button6 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1), _(<span class="string">&quot;Button6&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer3-&gt;<span class="built_in">Add</span>( m_button6, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button7 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn7), _(<span class="string">&quot;Button7&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer3-&gt;<span class="built_in">Add</span>( m_button7, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    m_button8 = <span class="keyword">new</span> <span class="built_in">wxButton</span>( <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn8), _(<span class="string">&quot;Button8&quot;</span>), wxDefaultPosition, wxDefaultSize, <span class="number">0</span> );</span><br><span class="line">    bSizer3-&gt;<span class="built_in">Add</span>( m_button8, <span class="number">0</span>, wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bSizer1-&gt;<span class="built_in">Add</span>( bSizer3, <span class="number">0</span>, wxALIGN_CENTER|wxALL, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bSizer1-&gt;<span class="built_in">Add</span>( <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, wxEXPAND, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">SetSizer</span>( bSizer1 );</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">Layout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">Centre</span>( wxBOTH );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect Events</span></span><br><span class="line">    m_button1-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button2-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button3-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button4-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button5-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button6-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button7-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">    m_button8-&gt;<span class="built_in">Connect</span>( wxEVT_COMMAND_BUTTON_CLICKED, <span class="built_in">wxCommandEventHandler</span>( BoxSizerDemoFrame::OnBtnClicked ), <span class="literal">NULL</span>, <span class="keyword">this</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoxSizerDemoFrame::~<span class="built_in">BoxSizerDemoFrame</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主窗口类"><a href="#主窗口类" class="headerlink" title="主窗口类"></a>主窗口类</h2><p>这里开始写主窗口类，另外因为wxFormBuilder 中有个虚函数:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Virtual event handlers, override them in your derived class</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnBtnClicked</span><span class="params">( wxCommandEvent&amp; event )</span> </span>&#123; event.<span class="built_in">Skip</span>(); &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们需要先创建一个继承自 BoxSizerDemoFrame 的类 BoxSizerDemo，BoxSizerDemo 的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BoxSizerDemo</span> : <span class="keyword">public</span> BoxSizerDemoFrame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnBtnClicked</span><span class="params">(wxCommandEvent &amp;event)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        event.<span class="built_in">Skip</span>();</span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="built_in">GetId</span>()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn1):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn1&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn2):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn2&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn3):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn3&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn4):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn4&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn5):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn5&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn6):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn6&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn7):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn7&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::Btn8):</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Btn8&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Default&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemoFrame&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BoxSizerDemo</span>(wxWindow *parent, wxWindowID id, <span class="type">const</span> wxString &amp;title) : <span class="built_in">BoxSizerDemoFrame</span>(parent,id,title)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="程序界面"><a href="#程序界面" class="headerlink" title="程序界面"></a>程序界面</h3><p><img src="/img/post_img/wxwidgets-wxformbuilder-005.png" alt="wxwidgets-wxformbuilder-005.png"></p>
<h3 id="主窗口代码"><a href="#主窗口代码" class="headerlink" title="主窗口代码"></a>主窗口代码</h3><p>头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主窗口</span></span><br><span class="line"><span class="comment">// Created by freer on 2024/7/3.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAIN_WINDOWS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_WINDOWS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wx/wx.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> wxFrame</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    wxMenu* mFileMenu, *mHelpMenu, *mExamplesMenu;</span><br><span class="line">    wxMenuBar *mMainMenuBar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnAbout</span><span class="params">(wxCommandEvent &amp;event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnMenuItemClicked</span><span class="params">(wxCommandEvent&amp; event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//MAIN_WINDOWS_H</span></span></span><br></pre></td></tr></table></figure>

<p>源文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>()</span><br><span class="line">    : <span class="built_in">wxFrame</span>(<span class="literal">nullptr</span>, wxID_ANY, <span class="string">&quot;Examples&quot;</span>),</span><br><span class="line">      <span class="built_in">mFileMenu</span>(<span class="keyword">new</span> wxMenu),</span><br><span class="line">      <span class="built_in">mHelpMenu</span>(<span class="keyword">new</span> wxMenu),</span><br><span class="line">      <span class="built_in">mMainMenuBar</span>(<span class="keyword">new</span> wxMenuBar),</span><br><span class="line">      <span class="built_in">mExamplesMenu</span>(<span class="keyword">new</span> wxMenu)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">SetMinSize</span>(<span class="built_in">wxSize</span>(<span class="number">300</span>, <span class="number">300</span>));<span class="comment">// 设置窗口的最小大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件菜单</span></span><br><span class="line">    mFileMenu-&gt;<span class="built_in">Append</span>(wxID_EXIT, <span class="string">&quot;&amp;Exit\tAlt+F4&quot;</span>, <span class="string">&quot;Close the application&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Examples 菜单</span></span><br><span class="line">    <span class="keyword">auto</span> *boxSizerDemoMenuItem = <span class="keyword">new</span> <span class="built_in">wxMenuItem</span>(mExamplesMenu, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::BoxSizer), <span class="string">&quot;&amp;BoxSizer\tCtrl+b&quot;</span>, <span class="built_in">wxT</span>(<span class="string">&quot;打开 BoxSizer 布局例子窗口&quot;</span>));</span><br><span class="line">    mExamplesMenu-&gt;<span class="built_in">Append</span>(boxSizerDemoMenuItem);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Bind</span>(wxEVT_MENU, &amp;MainWindow::OnMenuItemClicked, <span class="keyword">this</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::BoxSizer));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 帮助菜单</span></span><br><span class="line">    mHelpMenu-&gt;<span class="built_in">Append</span>(wxID_ABOUT, <span class="string">&quot;&amp;About...\tF1&quot;</span>, <span class="string">&quot;Show about dialog&quot;</span>);</span><br><span class="line">    mHelpMenu-&gt;<span class="built_in">Bind</span>(wxEVT_MENU, &amp;MainWindow::OnAbout, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将菜单添加到 MenuBar 中</span></span><br><span class="line">    mMainMenuBar-&gt;<span class="built_in">Append</span>(mFileMenu, <span class="string">&quot;&amp;File&quot;</span>);</span><br><span class="line">    mMainMenuBar-&gt;<span class="built_in">Append</span>(mExamplesMenu, <span class="string">&quot;&amp;Example&quot;</span>);</span><br><span class="line">    mMainMenuBar-&gt;<span class="built_in">Append</span>(mHelpMenu, <span class="string">&quot;&amp;Help&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetMenuBar</span>(mMainMenuBar);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreateStatusBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetStatusText</span>(_(<span class="string">&quot;Ready...&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于事件</span></span><br><span class="line"><span class="comment"> * @param event</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::OnAbout</span><span class="params">(wxCommandEvent &amp;event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">wxMessageBox</span>(<span class="built_in">wxT</span>(<span class="string">&quot;关于内容&quot;</span>), <span class="built_in">wxT</span>(<span class="string">&quot;关于标题&quot;</span>), wxOK | wxICON_INFORMATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MenuItem 单击事件</span></span><br><span class="line"><span class="comment"> * @param event</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::OnMenuItemClicked</span><span class="params">(wxCommandEvent &amp;event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="built_in">GetId</span>() == <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(XTPId::BoxSizer)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> *boxsizer = <span class="keyword">new</span> <span class="built_in">BoxSizerDemo</span>(<span class="keyword">this</span>, wxID_ANY, <span class="built_in">wxT</span>(<span class="string">&quot;BoxSizerDemo&quot;</span>));</span><br><span class="line">        boxsizer-&gt;<span class="built_in">Show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>wxWidgets</tag>
        <tag>wxFormBuilder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 按键例子 - 外部中断模式</title>
    <url>//article/at32/at32-exint-key-01/</url>
    <content><![CDATA[<p>今天给大家分享一个基于 <code>AT32</code> 单片机的中断按键例子，这个例子通过一个<strong>按键</strong>控制一个 <code>LED</code> 的亮灭（<strong>中断</strong>-<strong>上升沿</strong>触发模式）。</p>
<p>原理图：</p>
<p><img src="/img/post_img/at32-exint-key-01.png" alt="/img/post_img/at32-exint-key-01.png"></p>
<p>我们用的是 <code>FP11_SW1</code> ，注意要是能内部上拉电阻，这里我用了 <code>AT32 Work Bench</code> 可视化配置工具。</p>
<p><img src="/img/post_img/at32-exint-key-02.png" alt="GPIO 配置"></p>
<p>中断配置：</p>
<p><img src="/img/post_img/at32-exint-key-03.png" alt="中断配置"></p>
<p>配置为中断模式并且为上升沿触发，也就是我们在按下按键并且松开时才会触发中断。因为使能了内部上拉电阻，默认为高电平，所以才会在按键松开时触发中断。</p>
<p><img src="/img/post_img/at32-exint-key-04.png" alt="NVIC 配置"></p>
<p>我们需要勾选 <code>EXINT15_10_IRQ</code>，这样会在 <code>at32f435_437_int.c</code> 文件中生产 <code>EXINT15_10_IRQHandler()</code> 中断函数。</p>
<p>主循环代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line">confirm_state led2_flag = TRUE; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* add user code begin 3 */</span></span><br><span class="line">    gpio_bits_write(LED2_GPIO_PORT, LED2_PIN, led2_flag);</span><br><span class="line"><span class="comment">/* add user code end 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>EXINT15_10_IRQHandler() 函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// at32f435_437_int.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  this function handles EXINT Line [15:10] handler.</span></span><br><span class="line"><span class="comment">  * @param  none</span></span><br><span class="line"><span class="comment">  * @retval none</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXINT15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* add user code begin EXINT15_10_IRQ 0 */</span></span><br><span class="line">	<span class="keyword">if</span>(exint_interrupt_flag_get(EXINT_LINE_11) != RESET)</span><br><span class="line">	&#123;</span><br><span class="line">		led2_flag = !led2_flag;</span><br><span class="line">		exint_flag_clear(EXINT_LINE_11);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">/* add user code end EXINT15_10_IRQ 0 */</span></span><br><span class="line">  <span class="comment">/* add user code begin EXINT15_10_IRQ 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code end EXINT15_10_IRQ 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用的了两个函数 <code>exint_interrupt_flag_get()</code> 和 <code>exint_flag_clear()</code>，前者为判断中断标志位，后者为清除标志位。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>将上面代码编译下载到单片机后，发现比较稳定，不需要软件消抖可不会多次触发。</p>
<p><img src="/img/post_img/at32-exint-05.jpg" alt="at32-exint-05"></p>
<p>至此本实验到此结束！</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>按键</tag>
        <tag>中断</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 滴答定时器 LED 闪烁</title>
    <url>//article/at32/systick-led/</url>
    <content><![CDATA[<p>在此分享一下 <code>AT32 Work Bench</code> 创建的滴答定时器 <code>LED</code> 闪灯程序，程序只用到了一个 <code>LED</code>，下面是具体的内容。</p>
<p>配置 <code>system</code></p>
<p><img src="/img/post_img/systick-led-01.png" alt="system 配置"></p>
<p>要把时基源参数中的<strong>延时模式</strong>选择为<strong>中断</strong>，否则的话不会启动中断函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* add user code begin 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code end 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* system clock config. */</span></span><br><span class="line">  wk_system_clock_config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* config periph clock. */</span></span><br><span class="line">  wk_periph_clock_config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* nvic config. */</span></span><br><span class="line">  wk_nvic_config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* timebase config. */</span></span><br><span class="line">  wk_timebase_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* init gpio function. */</span></span><br><span class="line">  wk_gpio_config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code begin 2 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* add user code end 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* add user code begin 3 */</span></span><br><span class="line">    <span class="keyword">if</span> (led_count &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">      gpio_bits_write(LED2_GPIO_PORT, LED2_PIN, led2_flag = !led2_flag);</span><br><span class="line">      led_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* add user code end 3 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// at32f435_437_int.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  led_count++;</span><br><span class="line"></span><br><span class="line">  wk_timebase_handler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>systick</tag>
        <tag>滴答定时器</tag>
        <tag>LED</tag>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>流程图使用笔记</title>
    <url>//article/other/flow-chart/</url>
    <content><![CDATA[<p>写这篇流程图使用笔记，是因为想用流程图可视化的整理自己的逻辑。</p>
<h2 id="流程图类型"><a href="#流程图类型" class="headerlink" title="流程图类型"></a>流程图类型</h2><ul>
<li>基本流程图</li>
<li>数据流程图</li>
<li>泳道流程图</li>
</ul>
<h2 id="流程图符号"><a href="#流程图符号" class="headerlink" title="流程图符号"></a>流程图符号</h2><ul>
<li>基础符号<ul>
<li>椭圆形 （代表开始&#x2F;结束）</li>
<li>矩形 （表示一个过程）</li>
<li>平行四边形（表示信息的输入&#x2F;输出）</li>
<li>菱形（代表一个判断）</li>
<li>箭头（表示序列流）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>流程图</tag>
      </tags>
  </entry>
  <entry>
    <title>稳压二极管笔记</title>
    <url>//article/embedded/zener-diode-note/</url>
    <content><![CDATA[<p>稳压二极管的一些特性：</p>
<ul>
<li>温度特性<ul>
<li>一般稳压值低于 6V 的稳压二极管属于齐纳击穿，温度系数是负的；</li>
<li>高于 6V 的鱼鱼雪崩击穿，温度系数是正值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>二极管</tag>
        <tag>Diode</tag>
      </tags>
  </entry>
  <entry>
    <title>MSVC cl 命令使用笔记</title>
    <url>//article/msvc-cl-command-01/</url>
    <content><![CDATA[<p>我们又时不想安装 <code>Visual Studio</code> 又想使用 MSVC 编译器则可以安装 <a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/" title="Microsoft C++ 生成工具">Microsoft C++ 生成工具</a></p>
<blockquote>
<p>Microsoft C++ 生成工具通过可编写脚本的独立安装程序提供 MSVC 工具集，无需使用 Visual Studio。 如果从命令行界面(例如，持续集成工作流中)生成面向 Windows 的 C++ 库和应用程序， 作为持续集成工作流的一部分)。 包括 Visual Studio 2015 Update 3、Visual Studio 2017、Visual Studio 2019 和最新版本 Visual Studio 2022 中提供的工具。</p>
</blockquote>
<h2 id="cl-命令概述"><a href="#cl-命令概述" class="headerlink" title="cl 命令概述"></a>cl 命令概述</h2><p>本文主要记录 <code>cl</code> 命令的使用，一下是 <code>cl</code> 命令的简短概述：</p>
<p><code>cl</code>是微软 Visual C++ 编译器（MSVC）的命令行工具，用于将 C 和 C++ 源程序编译成可执行文件、动态链接库或静态链接库等。以下是对<code>cl</code>命令的详细概述：</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>cl</code>命令的基本语法格式为：<code>cl [options] source_file(s) [object_file(s)] [library_file(s)]</code>。</li>
<li><code>options</code>是一系列编译选项，用于指定编译的各种参数和行为，如优化级别、警告级别、输出文件类型等。</li>
<li><code>source_file(s)</code>是要编译的 C 或 C++ 源文件，可以有多个。</li>
<li><code>object_file(s)</code>是可选的目标文件，通常是由之前的编译过程生成的中间文件。</li>
<li><code>library_file(s)</code>是可选的库文件，用于链接到最终的可执行文件或库中。</li>
</ul>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li><strong>编译源文件</strong>：将输入的 C 或 C++ 源文件进行编译，生成对应的目标文件（<code>.obj</code>）。在这个过程中，编译器会进行词法分析、语法分析、语义分析等操作，将源程序转换为机器可理解的目标代码。</li>
<li><strong>链接目标文件和库文件</strong>：可以将多个目标文件以及所需的库文件进行链接，生成最终的可执行文件（<code>.exe</code>）或库文件（<code>.dll</code> 或 <code>.lib</code>）。链接过程中，会解决各个目标文件之间的符号引用问题，将它们合并成一个完整的可执行程序或库。</li>
<li><strong>生成调试信息</strong>：支持生成调试信息，以便在调试器中进行程序调试。调试信息包含了源程序与目标代码之间的对应关系、变量的类型和位置等，方便开发人员查找和解决程序中的错误。</li>
<li><strong>优化代码</strong>：提供了多种优化选项，能够对生成的目标代码进行优化，提高程序的执行效率和性能。优化操作包括指令调度、寄存器分配、常量折叠等。</li>
</ol>
<h3 id="常用编译选项"><a href="#常用编译选项" class="headerlink" title="常用编译选项"></a>常用编译选项</h3><ul>
<li><strong>&#x2F;EHsc</strong>：指定 C++ 异常处理模型为同步异常处理。</li>
<li><strong>&#x2F;MD</strong>、**&#x2F;MT<strong>、</strong>&#x2F;LD**：分别用于指定使用动态运行时库、静态运行时库以及生成动态链接库。</li>
<li><strong>&#x2F;O1</strong>、**&#x2F;O2<strong>、</strong>&#x2F;Ox**：不同级别的优化选项，优化程度依次增强。</li>
<li><strong>&#x2F;Wall</strong>：启用所有警告信息，帮助开发人员发现潜在的问题。</li>
<li><strong>&#x2F;I</strong>：指定头文件搜索路径，当编译器在默认路径下找不到头文件时，可以使用该选项指定额外的搜索路径。</li>
<li><strong>&#x2F;D</strong>：定义预处理器宏，相当于在源文件中使用<code>#define</code>指令定义宏。</li>
</ul>
<h3 id="与其他工具的配合"><a href="#与其他工具的配合" class="headerlink" title="与其他工具的配合"></a>与其他工具的配合</h3><ul>
<li><strong>与链接器（link.exe）配合</strong>：虽然<code>cl</code>命令本身可以进行链接操作，但在一些复杂的项目中，可能需要更精细的链接控制，此时可以将<code>cl</code>编译生成的目标文件交给<code>link.exe</code>进行链接。</li>
<li><strong>与调试器（如 Visual Studio Debugger）配合</strong>：生成的带有调试信息的可执行文件或库文件可以在调试器中进行调试，帮助开发人员快速定位和解决程序中的错误。</li>
<li><strong>与项目构建系统配合</strong>：在大型项目中，通常会使用项目构建系统如 MSBuild 或 CMake 等，这些系统会在内部调用<code>cl</code>命令来完成编译和链接任务。</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>先来一个 <code>Hello,World!</code> 程序，这个例子中只有一个 <code>main.c</code> 文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译该文件使用 <code>cl main.c</code>，则会生产 <code>main.exe</code> 可执行文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\tmp&gt; cl main.c</span><br><span class="line">用于 x64 的 Microsoft (<span class="built_in">R</span>) C/C++ 优化编译器 <span class="number">19.42</span>.<span class="number">34435</span> 版</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line">Microsoft (<span class="built_in">R</span>) Incremental Linker Version <span class="number">14.42</span>.<span class="number">34435.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">/out:main.exe </span><br><span class="line">main.obj </span><br></pre></td></tr></table></figure>

<h3 id="指定可执行文件名"><a href="#指定可执行文件名" class="headerlink" title="指定可执行文件名"></a>指定可执行文件名</h3><p>我们可以用 <code>cl main.c /link /out:run.exe</code> 中的 <code>/link /out:name.exe</code> 来指定可执行文件的名字。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\tmp&gt; cl main.c /link /out:run.exe</span><br><span class="line">用于 x64 的 Microsoft (<span class="built_in">R</span>) C/C++ 优化编译器 <span class="number">19.42</span>.<span class="number">34435</span> 版</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line">Microsoft (<span class="built_in">R</span>) Incremental Linker Version <span class="number">14.42</span>.<span class="number">34435.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">/out:main.exe</span><br><span class="line">/out:run.exe</span><br><span class="line">main.obj</span><br><span class="line"><span class="built_in">PS</span> D:\tmp&gt; .\run.exe</span><br><span class="line">Hello,World!</span><br></pre></td></tr></table></figure>

<h3 id="编译多个文件"><a href="#编译多个文件" class="headerlink" title="编译多个文件"></a>编译多个文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c: %d\n&quot;</span>, add(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADD_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>编译多个文件使用 <code>cl main.c add.c /link /out:run.exe</code>，直接在 cl 后面跟多个源文件名即可。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\tmp&gt; cl main.c add.c /link /out:run.exe</span><br><span class="line">用于 x64 的 Microsoft (<span class="built_in">R</span>) C/C++ 优化编译器 <span class="number">19.42</span>.<span class="number">34435</span> 版</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line">add.c</span><br><span class="line">正在生成代码...</span><br><span class="line">Microsoft (<span class="built_in">R</span>) Incremental Linker Version <span class="number">14.42</span>.<span class="number">34435.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">/out:main.exe </span><br><span class="line">/out:run.exe </span><br><span class="line">main.obj </span><br><span class="line">add.obj </span><br><span class="line"><span class="built_in">PS</span> D:\tmp&gt; .\run.exe</span><br><span class="line">c: <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="用-W3-W4-显示更多警告提示"><a href="#用-W3-W4-显示更多警告提示" class="headerlink" title="用 /W3 /W4 显示更多警告提示"></a>用 <code>/W3</code> <code>/W4</code> 显示更多警告提示</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\tmp&gt; cl /W3 main.c add.c /link /out:run.exe</span><br><span class="line">用于 x64 的 Microsoft (<span class="built_in">R</span>) C/C++ 优化编译器 <span class="number">19.42</span>.<span class="number">34435</span> 版</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line">main.c(<span class="number">7</span>): warning C4013: “add”未定义；假设外部返回 int</span><br><span class="line">add.c</span><br><span class="line">正在生成代码...</span><br><span class="line">Microsoft (<span class="built_in">R</span>) Incremental Linker Version <span class="number">14.42</span>.<span class="number">34435.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">/out:main.exe</span><br><span class="line">/out:run.exe</span><br><span class="line">main.obj</span><br><span class="line">add.obj</span><br></pre></td></tr></table></figure>

<p>上面例子提出警告是因为没有在 <code>main.c</code> 中包含 <code>add.h</code> 头文件。</p>
<p>添加过 <code>add.h</code> 头文件后，警告消失了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\tmp&gt; cl /W3 main.c add.c /link /out:run.exe</span><br><span class="line">用于 x64 的 Microsoft (<span class="built_in">R</span>) C/C++ 优化编译器 <span class="number">19.42</span>.<span class="number">34435</span> 版</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line">add.c</span><br><span class="line">正在生成代码...</span><br><span class="line">Microsoft (<span class="built_in">R</span>) Incremental Linker Version <span class="number">14.42</span>.<span class="number">34435.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">/out:main.exe</span><br><span class="line">/out:run.exe</span><br><span class="line">main.obj</span><br><span class="line">add.obj</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>MSVC</tag>
        <tag>cl命令</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 裸机按键长按操作小例子</title>
    <url>//article/at32/at32-button-long-press/</url>
    <content><![CDATA[<p>在此分享一个我写的单片机裸机按键长按判断程序，程序功能有一个<code>按键</code>和一个<code>led</code>，按键默认为低电平，按下时为高电平并且为中断上升沿触发，长按时让蜂鸣器开关状态反转一次，当蜂鸣器开关状态为关闭时，按按键时蜂鸣器不响，当蜂鸣器开关状态为打开时则每按一下按键蜂鸣器就会响一下。</p>
<h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>首先我们要定义一个结构体，这个结构体中包含各个用到的标志位和全局变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sf_types.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SF_TYPES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SF_TYPES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;at32f435_437.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">buzzer_t</span> &#123;</span> BUZZER_FLAG_OFF, BUZZER_FLAG_ON &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统参数结构体</span></span><br><span class="line"><span class="comment">// 1. 蜂鸣器开关标志位 buzzer_flag 0: 关闭蜂鸣器 1: 开启蜂鸣器</span></span><br><span class="line"><span class="comment">// key_state:</span></span><br><span class="line"><span class="comment">// bit[15] 未使用</span></span><br><span class="line"><span class="comment">// bit[14] 按键中断触发标志位，中断触发时置位该位</span></span><br><span class="line"><span class="comment">// bit[13] 长按标志位：1代表长按，0 清除长按标志位</span></span><br><span class="line"><span class="comment">// bit[12] 是否计数标志位：1 代表开始计数，0 代表停止计数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sf_system_t</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">buzzer_t</span> <span class="title">buzzer_flag</span>;</span></span><br><span class="line">    <span class="type">uint16_t</span> key_state;</span><br><span class="line">    <span class="type">uint16_t</span> long_down_count; <span class="comment">// 长按计数</span></span><br><span class="line">    confirm_state led2_flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sf_system_t</span> <span class="title">sf_sys</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sf_types.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sf_types.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并初始化结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sf_system_t</span> <span class="title">sf_sys</span> =</span> &#123;</span><br><span class="line">    .buzzer_flag = BUZZER_FLAG_OFF, <span class="comment">// 蜂鸣器默认为关闭状态</span></span><br><span class="line">    .key_state = <span class="number">0x0000</span>,            <span class="comment">// 按键状态默认全零</span></span><br><span class="line">    .long_down_count = <span class="number">0</span>            <span class="comment">// 长按计数器</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="外部中断服务函数"><a href="#外部中断服务函数" class="headerlink" title="外部中断服务函数"></a>外部中断服务函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXINT15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* add user code begin EXINT15_10_IRQ 0 */</span></span><br><span class="line">	<span class="keyword">if</span> (exint_interrupt_flag_get(EXINT_LINE_13) != RESET)&#123;</span><br><span class="line">		sf_sys.key_state = SET_BIT(sf_sys.key_state, <span class="number">14</span>); <span class="comment">// 置位中断标志位</span></span><br><span class="line">		exint_flag_clear(EXINT_LINE_13);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">/* add user code end EXINT15_10_IRQ 0 */</span></span><br><span class="line">  <span class="comment">/* add user code begin EXINT15_10_IRQ 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code end EXINT15_10_IRQ 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="滴答定时器中断服务函数"><a href="#滴答定时器中断服务函数" class="headerlink" title="滴答定时器中断服务函数"></a>滴答定时器中断服务函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* add user code begin SysTick_IRQ 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code end SysTick_IRQ 0 */</span></span><br><span class="line"></span><br><span class="line">  wk_timebase_handler();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add user code begin SysTick_IRQ 1 */</span></span><br><span class="line">  <span class="keyword">if</span> (GET_BIT(sf_sys.key_state, <span class="number">12</span>)) &#123;</span><br><span class="line">    sf_sys.long_down_count++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sf_sys.long_down_count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* add user code end SysTick_IRQ 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* add user code begin 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add user code end 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* system clock config. */</span></span><br><span class="line">    wk_system_clock_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* config periph clock. */</span></span><br><span class="line">    wk_periph_clock_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* nvic config. */</span></span><br><span class="line">    wk_nvic_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* timebase config. */</span></span><br><span class="line">    wk_timebase_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* usart1 already supports printf. */</span></span><br><span class="line">    <span class="comment">/* init usart1 function. */</span></span><br><span class="line">    wk_usart1_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init exint function. */</span></span><br><span class="line">    wk_exint_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init gpio function. */</span></span><br><span class="line">    wk_gpio_config();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add user code begin 2 */</span></span><br><span class="line">    Line();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;初始化结束...\n&quot;</span>);</span><br><span class="line">    Line();</span><br><span class="line">    <span class="comment">/* add user code end 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* add user code begin 3 */</span></span><br><span class="line">        <span class="comment">// 按键长按判断</span></span><br><span class="line">        <span class="keyword">while</span> (GET_BIT(sf_sys.key_state, <span class="number">14</span>) &amp;&amp;</span><br><span class="line">               (gpio_input_data_bit_read(SW1_GPIO_PORT, SW1_PIN) == SET)) &#123;</span><br><span class="line">            sf_sys.key_state = SET_BIT(sf_sys.key_state, <span class="number">12</span>); <span class="comment">// 置位计数标志位</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断按键按下超过 500ms</span></span><br><span class="line">            <span class="keyword">if</span> (sf_sys.long_down_count &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;long_down_count&gt;=500\n&quot;</span>);</span><br><span class="line">                sf_sys.key_state = CLEAR_BIT(sf_sys.key_state, <span class="number">12</span>);</span><br><span class="line">                <span class="comment">// 按键长按成功</span></span><br><span class="line">                sf_sys.key_state = CLEAR_BIT(sf_sys.key_state, <span class="number">14</span>);</span><br><span class="line">                SELF_LOGICAL_NOT(sf_sys.buzzer_flag); <span class="comment">// 反转蜂鸣器的开关状态</span></span><br><span class="line">                BUZZER_ON();</span><br><span class="line">                wk_delay_ms(<span class="number">5</span>);</span><br><span class="line">                BUZZER_OFF();</span><br><span class="line">                wk_delay_ms(<span class="number">5</span>);</span><br><span class="line">                <span class="comment">// 判断蜂鸣器标志位，向串口打印蜂鸣器开启状态</span></span><br><span class="line">                <span class="keyword">switch</span> (sf_sys.buzzer_flag) &#123;</span><br><span class="line">                <span class="keyword">case</span> BUZZER_FLAG_ON:</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;蜂鸣器已打开\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BUZZER_FLAG_OFF:</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;蜂鸣器已关闭\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sf_sys.key_state = CLEAR_BIT(sf_sys.key_state, <span class="number">12</span>); <span class="comment">// 清除计数标志位</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按键单击操作判断</span></span><br><span class="line">        <span class="keyword">if</span> (GET_BIT(sf_sys.key_state, <span class="number">14</span>) &amp;&amp;</span><br><span class="line">            (gpio_input_data_bit_read(SW1_GPIO_PORT, SW1_PIN) == RESET)) &#123;</span><br><span class="line">            <span class="comment">// 判断蜂鸣器标志位</span></span><br><span class="line">            <span class="keyword">if</span> (sf_sys.buzzer_flag == BUZZER_FLAG_ON) &#123;</span><br><span class="line">                BUZZER_ON();</span><br><span class="line">                wk_delay_ms(<span class="number">10</span>);</span><br><span class="line">                BUZZER_OFF();</span><br><span class="line">                wk_delay_ms(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SELF_LOGICAL_NOT(sf_sys.led2_flag); <span class="comment">// 自身逻辑取反</span></span><br><span class="line">            gpio_bits_write(LED2_GPIO_PORT, LED2_PIN, sf_sys.led2_flag);</span><br><span class="line">            sf_sys.key_state = CLEAR_BIT(sf_sys.key_state, <span class="number">14</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* add user code end 3 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="程序中用到的宏"><a href="#程序中用到的宏" class="headerlink" title="程序中用到的宏"></a>程序中用到的宏</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __UTILS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __UTILS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GetArrLen(array)    sizeof(array) / sizeof(array[0])    <span class="comment">// 获取数组的长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_BIT(num, n)     ((num) | (1 &lt;&lt; (n)))								<span class="comment">// 设置 num 中的某一位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLEAR_BIT(num, n)   ((num) &amp; ~(1&lt;&lt;(n)))									<span class="comment">// 清除 num 中的某一位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SELF_LOGICAL_NOT(num) (num = (!(num)))									<span class="comment">// 让自身等于自身的逻辑非</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_BIT(num, bit_pos) ((num &gt;&gt; bit_pos) &amp; 1)						<span class="comment">// 获取 num 中的某一位</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Line()  printf(<span class="string">&quot;===========================================\n&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>按键长按</tag>
        <tag>裸机</tag>
      </tags>
  </entry>
  <entry>
    <title>AT32 获取芯片唯一ID</title>
    <url>//article/at32/get_unique_id/</url>
    <content><![CDATA[<p>官方文档：</p>
<p><img src="/img/post_img/at32_unique_id.png" alt="at32_unique_id"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;at32f435_437_wk_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wk_system.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wk_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORAGE_INFO    0x1FFFF7E0 <span class="comment">// 闪存大小（单位：KByte）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIQUE_ID       0x1FFFF7E8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIQUE_ID_0_31  0x1FFFF7E8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIQUE_ID_32_63 0x1FFFF7EC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNIQUE_ID_64_95 0x1FFFF7F0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mcu_info_t</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> flash_size;</span><br><span class="line">    <span class="type">uint8_t</span> unique_id[<span class="number">12</span>];</span><br><span class="line">&#125; mcu_info;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_mcu_info</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mcu_info.flash_size = *(<span class="type">uint32_t</span> *)STORAGE_INFO;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Flash: %d KByte\n&quot;</span>, mcu_info.flash_size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</span><br><span class="line">        mcu_info.unique_id[i] = *(<span class="type">uint8_t</span>*)(UNIQUE_ID+i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %02x&quot;</span>, mcu_info.unique_id[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    wk_system_clock_config();</span><br><span class="line"></span><br><span class="line">    wk_periph_clock_config();</span><br><span class="line"></span><br><span class="line">    wk_nvic_config();</span><br><span class="line"></span><br><span class="line">    wk_timebase_init();</span><br><span class="line"></span><br><span class="line">    wk_usart1_init();</span><br><span class="line"></span><br><span class="line">    get_mcu_info();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>串口打印结果 (<strong>AT32F437ZGT7</strong>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2025-01-04 21:04:22.813] Flash: 1024 KByte  </span><br><span class="line">[2025-01-04 21:04:22.813] 41 c0 30 a0 00 c0 f5 04 17 97 20 0e  (96位唯一ID，8x【12字节】)</span><br><span class="line">[2025-01-04 21:04:22.813]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>AT32</tag>
        <tag>唯一ID</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Docker 搭建 hexo 博客环境</title>
    <url>//article/docker/docker-hexo-setting/</url>
    <content><![CDATA[<p>我的环境是 ubuntu 24.04 + docker，自己不喜欢在系统上安装 nodejs 因为配置麻烦，需要管理环境变量和版本。真的很烦人，但是又想使用 hexo 博客系统，所以我就在想能否在 Docker 容器中运行 hexo 。经过实验是可行的。</p>
<p>在次分享出我的 dockerfile 和 docker-compose.yml 两个文件的内容。</p>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 Node.js 18-slim 作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Git</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y git openssh-client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo Cli</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install hexo-cli -g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Git 用户信息</span></span><br><span class="line"><span class="keyword">ENV</span> GIT_USER=<span class="string">&quot;username&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> GIT_EMAIL=<span class="string">&quot;user@163.com&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> GIT_DEFAULT_BRANCH=<span class="string">&quot;main&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git config --global user.name <span class="variable">$&#123;GIT_USER&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git config --global user.email <span class="variable">$&#123;GIT_EMAIL&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git config --global --add safe.directory /app/.deploy_git &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git config --global init.defaultBranch <span class="variable">$&#123;GIT_DEFAULT_BRANCH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo 依赖</span></span><br><span class="line"><span class="comment"># RUN npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露默认的 Hexo 服务器端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Hexo 服务器</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;hexo&quot;</span>, <span class="string">&quot;server&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hexo:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span> <span class="comment"># 指定使用当前目录下的 Dockerfile 构建镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hexo-blog</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sf/hexo-blog:latest</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;$&#123;UID&#125;:$&#123;GID&#125;&quot;</span> <span class="comment"># 自动匹配宿主机的 UID/GID</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.env</span> <span class="comment"># 显式加载 .env 文件</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4000:4000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/app</span> <span class="comment"># 挂载宿主机的当前目录到容器的 /app 目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/zsf/.gitconfig:/home/node/.gitconfig</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/zsf/.ssh/known_hosts:/home/node/.ssh/known_hosts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/zsf/.ssh:/home/node/.ssh</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 总是</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GIT_USER=小土坡</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GIT_EMAIL=&quot;xiaotupo@163.com&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GIT_DEFAULT_BRANCH=main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_PROXY=&quot;http://192.168.0.102:7897&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTPS_PROXY=&quot;http://192.168.0.102:7897&quot;</span></span><br></pre></td></tr></table></figure>

<p>把 dockerfile 和 docker-compose.yml 文件方的 hexo 项目的根目录，然后运行 <code>docker compose up</code> 来开始构建并运行容器。</p>
<p>执行完成后就可以打开 <code>http://127.0.0.1:4000</code> 看到自己的博客了。</p>
<p>新建文章：</p>
<p><code>docker exec -it hexo-blog bash</code> ，进入容器后正常执行 hexo 命令即可，还可以 <code>docker exec -it hexo-blog hexo new post &quot;post name&quot;</code> 的方式创建文章。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>安装常用 react 相关库</title>
    <url>//article/react/install-library/</url>
    <content><![CDATA[<p>在这里记录以下安装常用库的过程。</p>
<h2 id="安装-UnoCSS-和预设"><a href="#安装-UnoCSS-和预设" class="headerlink" title="安装 UnoCSS 和预设"></a>安装 UnoCSS 和预设</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bun add -D unocss</span><br><span class="line">bun add -D @unocss/preset-uno</span><br></pre></td></tr></table></figure>

<p><code>@unocss/preset-uno</code> 是 <code>unocss</code> 的默认预设，官网地址：<a href="https://unocss.dev/presets/uno">Uno preset</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将 <code>virtual:uno.css</code> 添加到主入口文件 <code>main.tsx</code> 中。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StrictMode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:uno.css&#x27;</span>; <span class="comment">// 加入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.tsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="创建-uno-config-ts"><a href="#创建-uno-config-ts" class="headerlink" title="创建 uno.config.ts"></a>创建 uno.config.ts</h3><p>创建 <code>unocss</code> 配置文件 <code>uno.config.ts</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...UnoCSS options</span></span><br><span class="line">  <span class="comment">// 自定义规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    [<span class="string">&#x27;sft-text-red&#x27;</span>, &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;],</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">shortcuts</span>: [</span><br><span class="line">    [<span class="string">&#x27;btn&#x27;</span>, <span class="string">&#x27;py-2 px-4 rounded-md bg-primary text-green hover:bg-primary&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="更新-vite-config-ts-文件"><a href="#更新-vite-config-ts-文件" class="headerlink" title="更新 vite.config.ts 文件"></a>更新 vite.config.ts 文件</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react-swc&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UnoCSS</span> <span class="keyword">from</span> <span class="string">&#x27;unocss/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vite.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">react</span>(),</span><br><span class="line">    <span class="title class_">UnoCSS</span>()</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>unocss</tag>
        <tag>mui</tag>
      </tags>
  </entry>
  <entry>
    <title>React 常用库收藏</title>
    <url>//article/react/library/</url>
    <content><![CDATA[<p>在此分享一些我知道的常用 react 库。</p>
<ul>
<li><code>Mui</code> ：<a href="https://mui.com/">https://mui.com/</a></li>
<li><code>UnoCSS</code> : <a href="https://unocss.dev/">https://unocss.dev/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>组件</tag>
        <tag>React库</tag>
      </tags>
  </entry>
</search>
